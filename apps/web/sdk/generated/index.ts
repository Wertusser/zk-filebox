
/* Autogenerated file, do not edit! */

/* eslint-disable */

import { Noir, InputMap, type CompiledCircuit, type ForeignCallHandler } from "@noir-lang/noir_js"

export { type ForeignCallHandler } from "@noir-lang/noir_js"

export type Field = string;


export type askInputType = {
  buyer_pub: Field[];
  seller_pub: Field[];
  buyer_priv: Field;
}

export type askReturnType = Field;
export const ask_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"buyer_pub","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"seller_pub","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"buyer_priv","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"51":{"source":"use noir_edwards::{ScalarField, bjj::BabyJubJub, Curve, CurveTrait};\nuse super::utils::poseidon2_hash;\n\n// [8]G precalculated\nglobal BASE8_POINT: [Field; 2] = [\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n];\n\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n\n#[field(bn254)]\npub fn derive_public_key(private_key: Field) -> [Field; 2] {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let base8_point: BabyJubJub = Curve::new(BASE8_POINT[0], BASE8_POINT[1]);\n    let point = base8_point.mul(private_scalar);\n    [point.x, point.y]\n}\n\n#[field(bn254)]\npub fn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let point: BabyJubJub = Curve::new(public_key_packed[0], public_key_packed[1]);\n    let shared_key = point.mul(private_scalar);\n    shared_key.x\n}\n\n#[test]\nfn test_e2e() {\n    let a_key = poseidon2_hash([0]);\n    let a_pubkey = derive_public_key(a_key);\n\n    let b_key = poseidon2_hash([1]);\n    let b_pubkey = derive_public_key(b_key);\n\n    let key_1 = derive_shared_key(a_key, b_pubkey);\n    let key_2 = derive_shared_key(b_key, a_pubkey);\n\n    assert(key_1 == key_2);\n\n    println(f\"Alice public key: {a_pubkey}\");\n    println(f\"Alice private key: {a_key}\");\n    println(\"\");\n    println(f\"Bob public key: {b_pubkey}\");\n    println(\"\");\n    println(f\"Shared Key 1: {key_1}\");\n    println(f\"Shared Key 2: {key_2}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/ecdh.nr"},"54":{"source":"use poseidon::{poseidon2::Poseidon2};\n\n#[field(bn254)]\npub fn poseidon2_hash<let N: u32>(value: [Field; N]) -> Field {\n    Poseidon2::hash(value, N)\n}\n\n#[field(bn254)]\npub fn commit<let N: u32>(value: [Field; N], salt: Field) -> Field {\n    poseidon2_hash([poseidon2_hash(value), salt])\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/utils.nr"},"56":{"source":"mod scalar_field;\nmod test;\npub mod bjj;\n\npub use crate::scalar_field::ScalarField;\nuse std::ops::{Add, Neg, Sub};\n\npub struct Curve<Params> {\n    pub x: Field,\n    pub y: Field,\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### T R A I T S\n// ####################################################################################################################\n// ####################################################################################################################\n\n/// Parametrises a Twisted Edwards curve\ntrait TECurveParameterTrait {\n    fn a() -> Field; // twisted edward curve parameter a\n    fn d() -> Field; // twisted edward curve parameter d\n    fn gen() -> (Field, Field); // generator point x/y coordinates\n}\n\n/// Defines methods that a valid Curve implementation must satisfy\npub trait CurveTrait<Params>: Add + Sub + Eq + Neg + Default {\n    fn new(x: Field, y: Field) -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn dbl(self) -> Self;\n    fn mul<let NScalarSlices: u32>(self, x: ScalarField<NScalarSlices>) -> Self;\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self;\n\n    fn eq(self, x: Self) -> bool {\n        self == x\n    }\n    fn is_zero(self) -> bool {\n        self == Self::zero()\n    }\n\n    fn is_on_curve(self) -> bool;\n    fn assert_is_on_curve(self);\n    fn assert_equal(self, other: Self);\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### C O N S T R A I N E D    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> std::default::Default for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Returns point at infinity\n    ///\n    /// Cost: 0 gates\n    fn default() -> Self {\n        Curve::zero()\n    }\n}\n\nimpl<Params> std::ops::Add for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self + other`\n    ///\n    /// Cost: 7 gates\n    fn add(self, other: Self) -> Self {\n        Curve::add_internal(self, other, Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::ops::Neg for Curve<Params> {\n    /// Negate a point\n    ///\n    /// Cost: usually 0, will cost 1 gate if the `x` coordinate needs to be converted into a witness\n    fn neg(self) -> Self {\n        Curve { x: -self.x, y: self.y }\n    }\n}\n\nimpl<Params> std::ops::Sub for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self - other`\n    ///\n    /// Cost: 7 gates\n    fn sub(self, other: Self) -> Self {\n        Curve::add_internal(self, other.neg(), Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::cmp::Eq for Curve<Params> {\n    /// Compute `self == other`\n    ///\n    /// Cost: 6 gates\n    fn eq(self, other: Self) -> bool {\n        (self.x == other.x) & (self.y == other.y)\n    }\n}\n\nimpl<Params> std::convert::From<(Field, Field)> for Curve<Params> {\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    ///\n    /// Cost: 0 gates\n    fn from((x, y): (Field, Field)) -> Self {\n        Curve { x, y }\n    }\n}\n\nimpl<Params> CurveTrait<Params> for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n\n    /// Construct a new point\n    ///\n    /// If you know the x/y coords form a valid point DO NOT USE THIS METHOD\n    /// This method calls `assert_is_on_curve` which costs 3 gates.\n    /// Instead, directly construct via Curve{x, y} or use from((x, y))\n    ///\n    /// Cost: 3 gates\n    fn new(x: Field, y: Field) -> Self {\n        let result = Curve { x, y };\n        result.assert_is_on_curve();\n        result\n    }\n\n    /// Return the Identity element (point at infinity)\n    ///\n    /// Cost: 0 gates\n    fn zero() -> Self {\n        Curve { x: 0, y: 1 }\n    }\n\n    /// Return the Generator of the group\n    ///\n    /// Cost: 0 gates (assuming Params trait returns values known at compile time!)\n    fn one() -> Self {\n        let (x, y) = Params::gen();\n        Curve { x, y }\n    }\n\n    /// Validate a point is on the curve\n    ///\n    /// cheaper than `is_on_curve` (assert is cheaper than returning a bool)\n    ///\n    /// Cost: 3 gates\n    fn assert_is_on_curve(self) {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        assert(t2 == t3);\n    }\n\n    /// Constrain two points to equal each other\n    ///\n    /// Cheaper than `assert(self == other)` because no need to return a bool\n    ///\n    /// Cost: 0-2 gates (can do these asserts with just copy constraints)\n    fn assert_equal(self, other: Self) {\n        assert(self.x == other.x);\n        assert(self.y == other.y);\n    }\n\n    /// Return a bool that describes whether the point is on the curve\n    ///\n    /// If you don't need to handle the failure case, it is cheaper to call `assert_is_on_curve`\n    ///\n    /// Cost: 5 gates\n    fn is_on_curve(self) -> bool {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        (t2 == t3)\n    }\n\n    /// Compute `self + self`\n    ///\n    /// Cost: 5 gates\n    fn dbl(self) -> Self {\n        Curve::dbl_internal(self, Params::a(), Params::d())\n    }\n\n    /// Compute `self * scalar`\n    ///\n    /// Uses the Straus method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows:\n    ///      1: computing the Straus point lookup table (169 gates)\n    ///      2: 252 point doublings (1260 gates)\n    ///      3: 63 point additions (441 gates)\n    ///      4: 126 table reads with runtime index (252 gates)\n    ///\n    /// Cost: 2122 gates + cost of creating ScalarField (110 gates)\n    fn mul<let NScalarSlices: u32>(self: Self, scalar: ScalarField<NScalarSlices>) -> Self {\n        // define a, d params locally to make code more readable (shouldn't affect performance)\n        let a = Params::a();\n        let d = Params::d();\n\n        // Construct tables of precomputed point coordinates.\n        let (table_x, table_y): ([Field; 16], [Field; 16]) = self.compute_straus_point_table(a, d);\n\n        // Initialize the accumulator with the point that maps to the first (most significant) scalar slice\n        let idx = scalar.base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: table_x[idx], y: table_y[idx] };\n\n        // Execute a double-and-add subroutine\n        // 1. Compute `accumulator = accumulator * 16`\n        // 2. Extract 4-bits from the scalar multiplier and\n        //    use them to retrieve the corresponding point from our point table\n        // Note: this is similar to the \"double and add\" scalar multiplication method, except we use base16 instead of base2!\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            let idx = scalar.base4_slices[i] as u32;\n            let x = table_x[idx];\n            let y = table_y[idx];\n            accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n        }\n\n        // todo fix\n        if (scalar.skew) {\n            accumulator = accumulator - self;\n        }\n        accumulator\n    }\n\n    /// compute `points[0] * scalar[0] + ... + points[N-1] * scalar[N-1]`\n    ///\n    /// Is cheaper than `mul` when processing >1 point due to reduced number of point doublings\n    /// uses the Straus MSM method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows\n    /// PER POINT costs:\n    ///      1: computing the Straus point lookup table (169N gates)\n    ///      2: 63 point additions (441N gates)\n    ///      3: 126 table reads with runtime index (252N gates)\n    ///\n    /// Additional costs:\n    ///      1. 252 point doublings 1260 gates\n    ///\n    /// Cost: 1260 + 862N + cost of creating ScalarField (110N gates)\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self {\n        let a = Params::a();\n        let d = Params::d();\n\n        // Generalized version of `mul` for multiple points.\n        let mut point_tables: [([Field; 16], [Field; 16]); N] = [([0; 16], [0; 16]); N];\n        for j in 0..N {\n            point_tables[j] = points[j].compute_straus_point_table(a, d);\n        }\n\n        let idx = scalars[0].base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: point_tables[0].0[idx], y: point_tables[0].1[idx] };\n        for j in 1..N {\n            let idx = scalars[j].base4_slices[0] as u32;\n            let P = Curve { x: point_tables[j].0[idx], y: point_tables[j].1[idx] };\n            accumulator = accumulator.add_internal(P, a, d);\n        }\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            for j in 0..N {\n                let idx = scalars[j].base4_slices[i] as u32;\n                let x = point_tables[j].0[idx];\n                let y = point_tables[j].1[idx];\n                accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n            }\n        }\n\n        for j in 0..N {\n            if (scalars[j].skew == true) {\n                accumulator = accumulator - points[j];\n            }\n        }\n        accumulator\n    }\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### H E L P E R    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> Curve<Params> {\n\n    /// add two points together\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `add` :(\n    fn add_internal(self, other: Self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let x2 = other.x;\n        let y1 = self.y;\n        let y2 = other.y;\n        let (x, y, lambda) = unsafe { __add_unconstrained(x1, x2, y1, y2, a, d) };\n        let x1x2 = x1 * x2;\n        let x1y2 = x1 * y2;\n        std::as_witness(x1x2);\n        std::as_witness(x1y2);\n        let x_lhs = x * lambda * d + x - x1y2; // equals y1x2\n        let y_lhs = y * lambda * -d + y + x1x2 * a; // equals y1y2\n        let y1x2 = y1 * x2;\n        let y1y2 = y1 * y2;\n        std::as_witness(y1x2);\n        std::as_witness(y1y2);\n        let y1y2x1x2 = y1y2 * x1x2;\n        assert(x_lhs == y1x2);\n        assert(y_lhs == y1y2);\n        assert(y1y2x1x2 == lambda);\n        Self { x, y }\n    }\n\n    /// add a point to itself\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `dbl` :(\n    fn dbl_internal(self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let y1 = self.y;\n        let (x3, y3, _) = unsafe { __add_unconstrained(x1, x1, y1, y1, a, d) };\n        let x1x1a = x1 * x1 * a;\n        std::as_witness(x1x1a);\n        // t1 = a*x_1^2 + y_1^2\n        let t1 = y1 * y1 + x1x1a;\n        std::as_witness(t1);\n        // t3 = y_3 * (2 - a*x_1^2 + y_1^2) + 2*a*x_1^2\n        let t3 = y3 + y3 - t1 * y3 + x1x1a * 2;\n        // t3 == t1 implies y_3 * (2 - a*x_1^2 - y_1^2) + 2*a*x_1^2 == a*x_1^2 + y_1^2\n        // i.e. y_3 = y_1^2 - a*x_1^2 / (2 - a*x_1^2 - y_1^2)\n        assert(t3 == t1);\n        let t4 = x1 * y1;\n        std::as_witness(t4);\n        // x3 * t1 - t4 == t4 implies x_3 * (y_1^2 + a * x_1^2) = 2 * x_1 * y_1\n        // i.e. x_3 = 2 * x_1 * y_1 / (y_1^2 + a * x_1^2)\n        let t2 = x3 * t1 - t4;\n        assert(t2 == t4);\n        Self { x: x3, y: y3 }\n    }\n\n    /// Compute a 4-bit lookup table of point multiples for the Straus windowed scalar multiplication algorithm.\n    ///\n    /// Table contains [0, P, 2P, ..., 15P], which is used in the scalar mul algorithm to minimize the total number of required point additions\n    ///\n    /// It is cheaper to use ([Field; 16], [Field; 16]) than it is ([Curve; 16]).\n    /// This is because the compiler will represent [Curve; 16] in 1 ROM array (vs 2 for [Field; 16], [Field; 16]).\n    /// This means that any index into the ROM array for [Curve; 16] requires an additional arithmetic gate to process.\n    ///\n    ///      For example consider `let P: Curve = table[idx]`\n    ///      `table` will be a ROM array with 32 elements in it.\n    ///      The x-coordinates will be located at `2 * idx`\n    ///      The y-coordinates will be located at `2 * idx + 1`\n    ///      If `idx` is not known at compile time (for Straus it isnt), 2 arithmetic gates are required to evaluate `2 * idx`, `2 * idx + 1`\n    ///      before they can be used as arguments in a memory lookup protocol\n    ///\n    ///      Now consider `let P_x = table_x[idx]; let P_y = table_y[idx]`\n    ///      In this example, `idx` can be directly used as the argument into a memory lookup protocol for both tables.\n    ///\n    ///      For the Barretenberg backend, the cost of a Read-Only memory lookup is 2 gates,\n    ///      so splitting the x/y coordinates into separate tables means that the cost to lookup a point is 4 gates\n    ///      2 extra arithmetic gates would increase the cost by 50%, which we avoid by returning `([Field; 16], [Field; 16])` instead of `([Curve; 16])`\n    ///\n    /// Key cost components are as follows:\n    ///      1: Defining two size-16 lookup tables (2 gates per element, 32 elements = 64 gates)\n    ///      2: 15 point additions (7 * 5 = 105)\n    ///\n    /// Total Cost: 169 gates\n    fn compute_straus_point_table(self, a: Field, d: Field) -> ([Field; 16], [Field; 16]) {\n        let mut table_x: [Field; 16] = [0; 16];\n        let mut table_y: [Field; 16] = [0; 16];\n        table_x[8] = self.x;\n        table_y[8] = self.y;\n        let D = self.dbl_internal(a, d);\n        for i in 1..8 {\n            let Q = Self { x: table_x[7 + i], y: table_y[7 + i] };\n            let V = D.add_internal(Q, a, d);\n            table_x[8 + i] = V.x;\n            table_y[8 + i] = V.y;\n        }\n        for i in 0..8 {\n            table_x[i] = -table_x[15 - i];\n            table_y[i] = table_y[15 - i];\n        }\n        (table_x, table_y)\n    }\n}\n\n/// add points together, return output + lambda ter\nunconstrained fn __add_unconstrained(\n    x1: Field,\n    x2: Field,\n    y1: Field,\n    y2: Field,\n    a: Field,\n    d: Field,\n) -> (Field, Field, Field) {\n    let lambda = y1 * y2 * x1 * x2;\n    let y = (x1 * x2 * a - y1 * y2) / (lambda * d - 1);\n    let x = (x1 * y2 + y1 * x2) / (lambda * d + 1);\n    (x, y, lambda)\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/lib.nr"},"57":{"source":"use std::static_assert;\n\n/// ScalarField represents a scalar multiplier as a sequence of 4-bit slices\n///\n/// There is nuance to ScalarField, because twisted edwards curves generally have prime group orders that easily fit into a Field\n/// We can therefore obtain cheap conversions by simply summing up the bit slices and validate they equal the input scalar\n/// However...when converting arbitrary field elements (i.e. scalars that are multiples of a TE curve group order),\n/// we must perform additional checks when converting into 4-bit slices, as we must validate that the sum of the slices is smaller than the Field modulus (when evaluated over the integers)\n/// This is expensive and we would rather not do it! therefore ScalarField<N> is flexible.\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n///\n/// N.B. ScalarField bit values are not constrained to be smaller than the TE curve group order.\n/// ScalarField is used when performing scalar multiplications, where all operations wrap modulo the curve order\npub global TWO_POW_128: Field = 0x100000000000000000000000000000000;\npub global PLO: Field = 0x2833e84879b9709143e1f593f0000001;\npub global PHI: Field = 0x30644e72e131a029b85045b68181585d;\n\npub struct ScalarField<let N: u32> {\n    pub(crate) base4_slices: [u8; N],\n    pub(crate) skew: bool,\n}\n\nunconstrained fn get_wnaf_slices<let N: u32>(x: Field) -> ([u8; N], bool) {\n    let mut result: [u8; N] = [0; N];\n    let mut nibbles: [u8; N] = to_le_radix_16(x);\n\n    let skew: bool = nibbles[0] & 1 == 0;\n    nibbles[0] += skew as u8;\n    result[N - 1] = (nibbles[0] + 15) / 2;\n    for i in 1..N {\n        let mut nibble: u8 = nibbles[i];\n        result[N - 1 - i] = (nibble + 15) / 2;\n        if (nibble & 1 == 0) {\n            result[N - 1 - i] += 1;\n            result[N - i] -= 8;\n        }\n    }\n    (result, skew)\n}\n\nunconstrained fn from_wnaf_slices<let N: u32>(x: [u8; N], skew: bool) -> Field {\n    let mut result: Field = 0;\n\n    for i in 0..N {\n        result *= 16;\n        result += (x[i] as Field) * 2 - 15;\n    }\n    result -= skew as Field;\n    result\n}\n\nunconstrained fn get_borrow_flag(lhs_lo: Field, rhs_lo: Field) -> bool {\n    lhs_lo.lt(rhs_lo + 1)\n}\n\nunconstrained fn to_le_radix_16<let N: u32>(value: Field) -> [u8; N] {\n    // Round up on odd values of `N` to ensure space for last nibble.\n    let bytes = value.to_le_bytes::<(N + 1) / 2>();\n    let mut result: [u8; N] = [0; N];\n    for index in 0..(N / 2) {\n        result[index * 2] = bytes[index] & 0x0F; // Extract low nibble (bits 0-3)\n        result[index * 2 + 1] = (bytes[index] >> 4); // Extract high nibble (bits 4-7)\n    }\n    if (N & 1) == 1 {\n        let last_nibble = bytes[bytes.len() - 1];\n        // The last byte must have the top 4 bits empty.\n        (last_nibble as Field).assert_max_bit_size::<4>();\n        result[N - 1] = last_nibble;\n    }\n    result\n}\n\nimpl<let N: u32> std::convert::From<Field> for ScalarField<N> {\n\n    /// Construct from a field element\n    ///\n    /// if N >= 64 we perform extra checks to ensure the slice decomposition represents the same integral value as the input\n    /// (e.g. sum of slices != x + modulus)\n    fn from(x: Field) -> Self {\n        // the field elements have 254 bits max, so we do not need to support N > 64\n        static_assert(N <= 64, \"N must be at most 64\");\n        let mut result: Self = ScalarField { base4_slices: [0; N], skew: false };\n        let (slices, skew): ([u8; N], bool) = unsafe { get_wnaf_slices(x) };\n        result.base4_slices = slices;\n        result.skew = skew;\n        if (N < 64) {\n            let mut acc: Field = (slices[0] as Field) * 2 - 15;\n            for i in 1..N {\n                acc *= 16;\n                acc += (slices[i] as Field) * 2 - 15;\n            }\n            assert(acc - skew as Field == x);\n        } else {\n            // TODO: if num bits = 64, validate in sum of the bits is smaller than the Field modulus\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n\n            for i in 0..32 {\n                lo *= 16;\n                lo += (slices[32 + i] as Field) * 2 - 15;\n                hi *= 16;\n                hi += (slices[i] as Field) * 2 - 15;\n            }\n\n            lo -= skew as Field;\n            // Validate that the integer represented by (lo, hi) is smaller than the integer represented by (plo, phi)\n\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            // Safety: we assert that the absolute value has less than 128 bits\n            let is_positive: bool = unsafe { get_borrow_flag(lo, TWO_POW_128) };\n\n            let abs_lo = (is_positive as Field) * lo + (1 - is_positive as Field) * (-lo);\n\n            abs_lo.assert_max_bit_size::<128>();\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            let borrow = unsafe { get_borrow_flag(PLO, abs_lo) as Field };\n            // we only need to check the rlo has 128 bits or less if lo is positive. if negative, the lo is already less than PLO\n            let rlo = is_positive as Field * (PLO - lo + borrow * TWO_POW_128 - 1)\n                + (1 - is_positive as Field) * (-lo); // -1 because we are checking a strict <, not <=\n            // is lo is positive, we need to check the hi is less than phi with the borrow flag subtracted\n            // if lo is negative, we have to check that hi * 2^128 < phi * 2^128 + abs_lo + plo\n            // to do this we first make a flag to check that abs_lo + plo is larger than 2^128 or not\n            // if they are larger, we check that hi < phi + 1 and otherwise we check that hi < phi\n            // Safety: we assert the when the flag is positive we have less than 128 bits\n            let threshold_flag: bool = unsafe { get_borrow_flag(abs_lo + PLO, TWO_POW_128) };\n            (threshold_flag as Field * (abs_lo + PLO)).assert_max_bit_size::<128>();\n            let rhi = is_positive as Field * (PHI - hi - borrow)\n                + (1 - is_positive as Field) * (PHI - hi + threshold_flag as Field);\n            // the rlo value would have 128 bits or less if positive and more if negative as the modulus is 254 bits\n            rlo.assert_max_bit_size::<128>();\n            rhi.assert_max_bit_size::<128>();\n        }\n        for i in 0..N {\n            (result.base4_slices[i] as Field).assert_max_bit_size::<4>();\n        }\n        result\n    }\n}\n\nimpl<let N: u32> std::convert::Into<Field> for ScalarField<N> {\n\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    fn into(self: Self) -> Field {\n        let mut acc: Field = 0;\n        for i in 0..N {\n            acc = acc * 16;\n            acc = acc + (self.base4_slices[i] as Field) * 2 - 15;\n        }\n        acc -= self.skew as Field;\n        acc\n    }\n}\n\nimpl<let N: u32> ScalarField<N> {\n\n    pub fn new() -> Self {\n        Self { base4_slices: [0; N], skew: false }\n    }\n    fn get(self, idx: u32) -> u8 {\n        self.base4_slices[idx]\n    }\n}\n\n#[test]\nunconstrained fn test_wnaf() {\n    let result: Field = 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0;\n    let (t0, t1) = get_wnaf_slices::<64>(result);\n    let expected = from_wnaf_slices(t0, t1);\n    assert_eq(result, expected);\n}\n\n#[test]\nfn test_regression_wnaf() {\n    let a = 0x7b;\n    let s: ScalarField<64> = ScalarField::<64>::from(a);\n    let b: Field = ScalarField::<64>::into(s);\n    assert_eq(a, b);\n}\n\n#[test]\nunconstrained fn to_le_radix_16_works_with_odd_N() {\n    let input = 0x0f00;\n    let nibbles: [u8; 3] = to_le_radix_16(input);\n    assert_eq(nibbles, [0x0, 0x0, 0xf]);\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/scalar_field.nr"},"65":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"67":{"source":"use common::{ecdh::{derive_public_key, derive_shared_key}, utils::poseidon2_hash};\n\nfn main(buyer_pub: pub [Field; 2], seller_pub: [Field; 2], buyer_priv: Field) -> pub Field {\n    assert(buyer_pub == derive_public_key(buyer_priv));\n    // return poseidon hash of shared key\n    poseidon2_hash([derive_shared_key(buyer_priv, seller_pub)])\n}\n\n#[test]\nfn test_main() {}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/ask/src/main.nr"}}};

export async function ask(buyer_pub: Field[], seller_pub: Field[], buyer_priv: Field, foreignCallHandler?: ForeignCallHandler): Promise<Field> {
  const program = new Noir(ask_circuit);
  const args: InputMap = { buyer_pub, seller_pub, buyer_priv };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field;
}
export type decrypt_packetInputType = {
  ciphers: Field[];
  key: Field[];
  nonce: Field;
}

export type decrypt_packetReturnType = Field[];
export const decrypt_packet_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"ciphers","type":{"kind":"array","length":511,"type":{"kind":"field"}},"visibility":"private"},{"name":"key","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":510,"type":{"kind":"field"}},"visibility":"private"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZrdTiM5EIXfpa9z4SqX/3iVERoFyIwiRQFlYKQV4t3XTlwnzK7aGHu4oYpO/B13u45jx3ldHnZ3Lz+/748/Hn8tN99el7vT/nDY//x+eLzfPu8fj/nq62LKH/LLDb1tFtJ/fM7DJcTlJuSQlpu4WTi/PeY3sr6RLy/JW76o3O/Pp92uvOGdUJZ/2p52x+fl5vhyOGyW39vDy/lNv562x3N83p7yq2az7I4POWbgj/1hV7K3zbW1WW9KZIRr85x7BwTFXkZMthJiStf2obd9sr62Ty6stbdffA9GCZH9Wh/censvUtt7Z0faR9L2MQ611yIIxg6MgTc6hl6uZeT4j/ZpvT0brx3I6fUO3J+VSI0uBBf0GQSXZG0QidYR1sZUEdam1VoibiAMB0UYa4cQ5KIiKKQxRAKCab0XjYpgz/o42TduxDeMlawiKEkcQbAx17rg9V7EdYQLKE0yq1XR7IP4a22ujgebr+wDeS0rpihDj5I8TSNQmcMIhsXY8mpNcKMyyeJpkk00hBDCjC/8FxBuDMEJCJFBRATCpekbGUWE643EOItwZgzh6IoQXl0JyKRP232AybJXVofU+tm5ojlzO8wVfn2+snHapTZN10QT0TegQpMPs92HrgEV+5UDGqzT0Qh+9VHK/Jwp8xOezE94Mj/hyfyEJ/MTnsxPeDI/4bnZ2pT5Cc+5WX+0VrscBKvduDqgZVacXO26OL1UdWnySbj5edvTdGk3EX116Wfrst2Hrrr0s3XZLqquD2IfprdQLURnXfrZumz3oWsLFegr+9C3hfoAQdOIri1UE9Fn8uCnlwNNRN8Wqh/hxhBdK4oPED0riu4bGUV0Tbu9iMaKoonom7nj7KzZ7kPXzB3DV87cfSvumKYt1kT0Wawf4cYQXRb7ANFjse4bGUV0WawX0bBYnN/UptlvNOP8ppbM7Feand/4k3Fr3/i3CGQZhGRGCIy6ZLYyRMDhE/O70fwEQVg3LyzejhAcipJdGiMk3IU3MtmHQYInjIV/d4b2mT54i+cQhggeG0kONPQkk8FzeL9e/wzhusZMgYYIAR9eKdrZPvyHcJv/297vT/870iZ7PswugS/Blglzs0iZWDaLK1uYzeIvIVxCLN7dLOkSyBQT5EhlLHLkGjOpfCCT1JhZtpyQ+xozrRzhloNz0eNxuRydn2PmlQ0Ic42Z58p1qTHzXLnuayzn8OV6rDHzfL5uTY1UI9doywlqjlLOT3N0NWZeyP2xocZysJ/7bzMv5H6LqTHzYuYI15h5MfNEasy8lHnia8y8lJ+exBpTmazzA3RGkzIS5UzasSZWkzIeJqs4p4nXJGgSNUk18UYT0oQ1sZoo2SvZK9kr2SvZKzkoOSg5KDkoOSg5KDkoOSg5KDkoOSo5KjkqOSo5KjkqOSo5KjkqOSo5KTkpOSk5KTkpOSk5KTkpOSk5KTl/5iIjZIzMIhNkDplHFpBFZNAgaBA0CBoEDYIGQYOgQdAgaBA0GBoMDYYGQ4OhwdBgaDA0GBoMDQsNCw0LDQsNCw0LDQsNCw0LDQsNgYZAQ6Ah0BBoCDQEGgINgYZAw0HDQcNBw0ED1iV4l2BegnsJ9iX4l2BggoMJFiZ4mGBigosJNib4mGBkgpMJViZ4mWBmgpsJdib4mWBogqMJliZ4mmBqgqsJtib4mmBsgrMJ1iZ4m2BugrsJ9ib4m2BwgsMJFid4nGBygssJNif4nOFzhs8ZPmf4nOFzhs8ZPmf4nOFzhs8ZPmf4nOFzhs8ZPmf4nOFzhs8ZPmf4nOFzhs8ZPmf4nOFzhs/57POyr+Ozz89Lh7PPqazefm9P++3dYVcWGGUJ8nK81/VG/vf5nyd9RX9k93R6vN89vJx2ZW3y7pd2+e+3vNhgucXv7cqlvNLgdItf1p0vhY3l27eyyvkX","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"50":{"source":"use super::utils::poseidon2_hash;\nuse poseidon::poseidon2_permutation;\n\n#[field(bn254)]\nfn compute_pad(key: Field, nonce: Field, counter: u32) -> Field {\n    poseidon2_hash([key, nonce, counter as Field])\n}\n\n#[field(bn254)]\npub fn encrypt_single(plains: Field, key: Field, nonce: Field, counter: u32) -> Field {\n    plains + compute_pad(key, nonce, counter)\n}\n\n#[field(bn254)]\npub fn decrypt_single(ciphers: Field, key: Field, nonce: Field, counter: u32) -> Field {\n    ciphers - compute_pad(key, nonce, counter)\n}\n\n#[field(bn254)]\npub fn encrypt<let N: u32>(plains: [Field; N], key: Field, nonce: Field) -> [Field; N] {\n    plains.mapi(|i, p| encrypt_single(p, key, nonce, i))\n}\n\n#[field(bn254)]\npub fn decrypt<let N: u32>(ciphers: [Field; N], key: Field, nonce: Field) -> [Field; N] {\n    ciphers.mapi(|i, c| decrypt_single(c, key, nonce, i))\n}\n\n#[field(bn254)]\npub fn poseidon_encrypt<let N: u32>(\n    plains: [Field; N],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; N + 1] {\n    assert(nonce.lt(0x100000000000000000000000000000000));\n\n    let padded_nonce = nonce + (N as Field) * 0x100000000000000000000000000000000;\n    let mut state: [Field; 4] = [0, key[0], key[1], padded_nonce];\n\n    let state_len = state.len();\n    assert(N >= state_len - 1);\n\n    let mut ciphers: [Field; N + 1] = [0; N + 1];\n\n    for i in 0..(N / (state_len - 1)) {\n        state = poseidon2_permutation(state, state_len);\n\n        for j in 1..state_len {\n            let index = i * (state_len - 1) + j - 1;\n            state[j] += plains[index];\n            ciphers[index] = state[j];\n        }\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    for i in (N - (N % (state_len - 1)))..N {\n        let index = (i % (state_len - 1)) + 1;\n        state[index] += plains[i];\n        ciphers[i] = state[index];\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    ciphers[N] = state[1];\n    ciphers\n}\n\n#[field(bn254)]\npub fn poseidon_decrypt<let N: u32>(\n    ciphers: [Field; N + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; N] {\n    assert(nonce.lt(0x100000000000000000000000000000000));\n\n    let padded_nonce = nonce + (N as Field) * 0x100000000000000000000000000000000;\n    let mut state: [Field; 4] = [0, key[0], key[1], padded_nonce];\n\n    let state_len = state.len();\n    assert(N >= state_len - 1);\n\n    let mut plains: [Field; N] = [0; N];\n\n    for i in 0..(N / (state_len - 1)) {\n        state = poseidon2_permutation(state, state_len);\n\n        for j in 1..state_len {\n            let index = i * (state_len - 1) + j - 1;\n            plains[index] = ciphers[index] - state[j];\n            state[j] = ciphers[index];\n        }\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    for i in (N - (N % (state_len - 1)))..N {\n        let index = (i % (state_len - 1)) + 1;\n        plains[i] = ciphers[i] - state[index];\n        state[index] = ciphers[i];\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    assert(ciphers[N] == state[1]);\n    plains\n}\n\n#[test]\nfn test_e2e() {\n    let key = 0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961;\n    let nonce = 1337;\n\n    let msg = [22405534230753963835153736737; 256]; // \"Hello world!\"\n    let encrypted = encrypt(msg, key, nonce);\n    let new_msg = decrypt(encrypted, key, nonce);\n\n    assert(msg == new_msg);\n\n    println(f\"Key: {key}\");\n    println(f\"nonce: {nonce}\");\n\n    println(f\"Original: {msg}\");\n    println(f\"Encrypted: {encrypted}\");\n    println(f\"Decrypted: {new_msg}\");\n}\n\n#[test]\nfn test_e2e_poseidon() {\n    let key: [Field; 2] = [\n        0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961,\n        0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961,\n    ];\n    let nonce = 1337;\n\n    let msg = [22405534230753963835153736737; 1024]; // \"Hello world!\"\n    let encrypted = poseidon_encrypt(msg, key, nonce);\n    let new_msg = poseidon_decrypt(encrypted, key, nonce);\n\n    assert(msg == new_msg);\n\n    println(f\"Key: {key}\");\n    println(f\"nonce: {nonce}\");\n\n    println(f\"Original: {msg}\");\n    println(f\"Encrypted: {encrypted}\");\n    println(f\"Decrypted: {new_msg}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/cipher.nr"},"52":{"source":"use super::cipher::poseidon_decrypt;\n\n#[export]\npub fn get_key_commitment(key: [Field; 2], salt: Field) -> Field {\n    super::utils::commit(key, salt)\n}\n\n// #[export]\n// fn encrypt_key(master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::encrypt_single(master_key, key, nonce, 0)\n// }\n\n// #[export]\n// fn decrypt_key(enc_master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::decrypt_single(enc_master_key, key, nonce, 0)\n// }\n\n#[export]\npub fn decrypt_packet(\n    ciphers: [Field; 510 + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; 510] {\n    poseidon_decrypt(ciphers, key, nonce)\n}\n\n#[export]\nfn derive_public_key(private_key: Field) -> [Field; 2] {\n    super::ecdh::derive_public_key(private_key)\n}\n\n#[export]\nfn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    super::ecdh::derive_shared_key(private_key, public_key_packed)\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/exports.nr"}}};

export async function decrypt_packet(ciphers: Field[], key: Field[], nonce: Field, foreignCallHandler?: ForeignCallHandler): Promise<Field[]> {
  const program = new Noir(decrypt_packet_circuit);
  const args: InputMap = { ciphers, key, nonce };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field[];
}
export type derive_public_keyInputType = {
  private_key: Field;
}

export type derive_public_keyReturnType = Field[];
export const derive_public_key_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"private_key","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"51":{"source":"use noir_edwards::{ScalarField, bjj::BabyJubJub, Curve, CurveTrait};\nuse super::utils::poseidon2_hash;\n\n// [8]G precalculated\nglobal BASE8_POINT: [Field; 2] = [\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n];\n\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n\n#[field(bn254)]\npub fn derive_public_key(private_key: Field) -> [Field; 2] {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let base8_point: BabyJubJub = Curve::new(BASE8_POINT[0], BASE8_POINT[1]);\n    let point = base8_point.mul(private_scalar);\n    [point.x, point.y]\n}\n\n#[field(bn254)]\npub fn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let point: BabyJubJub = Curve::new(public_key_packed[0], public_key_packed[1]);\n    let shared_key = point.mul(private_scalar);\n    shared_key.x\n}\n\n#[test]\nfn test_e2e() {\n    let a_key = poseidon2_hash([0]);\n    let a_pubkey = derive_public_key(a_key);\n\n    let b_key = poseidon2_hash([1]);\n    let b_pubkey = derive_public_key(b_key);\n\n    let key_1 = derive_shared_key(a_key, b_pubkey);\n    let key_2 = derive_shared_key(b_key, a_pubkey);\n\n    assert(key_1 == key_2);\n\n    println(f\"Alice public key: {a_pubkey}\");\n    println(f\"Alice private key: {a_key}\");\n    println(\"\");\n    println(f\"Bob public key: {b_pubkey}\");\n    println(\"\");\n    println(f\"Shared Key 1: {key_1}\");\n    println(f\"Shared Key 2: {key_2}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/ecdh.nr"},"52":{"source":"use super::cipher::poseidon_decrypt;\n\n#[export]\npub fn get_key_commitment(key: [Field; 2], salt: Field) -> Field {\n    super::utils::commit(key, salt)\n}\n\n// #[export]\n// fn encrypt_key(master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::encrypt_single(master_key, key, nonce, 0)\n// }\n\n// #[export]\n// fn decrypt_key(enc_master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::decrypt_single(enc_master_key, key, nonce, 0)\n// }\n\n#[export]\npub fn decrypt_packet(\n    ciphers: [Field; 510 + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; 510] {\n    poseidon_decrypt(ciphers, key, nonce)\n}\n\n#[export]\nfn derive_public_key(private_key: Field) -> [Field; 2] {\n    super::ecdh::derive_public_key(private_key)\n}\n\n#[export]\nfn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    super::ecdh::derive_shared_key(private_key, public_key_packed)\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/exports.nr"},"56":{"source":"mod scalar_field;\nmod test;\npub mod bjj;\n\npub use crate::scalar_field::ScalarField;\nuse std::ops::{Add, Neg, Sub};\n\npub struct Curve<Params> {\n    pub x: Field,\n    pub y: Field,\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### T R A I T S\n// ####################################################################################################################\n// ####################################################################################################################\n\n/// Parametrises a Twisted Edwards curve\ntrait TECurveParameterTrait {\n    fn a() -> Field; // twisted edward curve parameter a\n    fn d() -> Field; // twisted edward curve parameter d\n    fn gen() -> (Field, Field); // generator point x/y coordinates\n}\n\n/// Defines methods that a valid Curve implementation must satisfy\npub trait CurveTrait<Params>: Add + Sub + Eq + Neg + Default {\n    fn new(x: Field, y: Field) -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn dbl(self) -> Self;\n    fn mul<let NScalarSlices: u32>(self, x: ScalarField<NScalarSlices>) -> Self;\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self;\n\n    fn eq(self, x: Self) -> bool {\n        self == x\n    }\n    fn is_zero(self) -> bool {\n        self == Self::zero()\n    }\n\n    fn is_on_curve(self) -> bool;\n    fn assert_is_on_curve(self);\n    fn assert_equal(self, other: Self);\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### C O N S T R A I N E D    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> std::default::Default for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Returns point at infinity\n    ///\n    /// Cost: 0 gates\n    fn default() -> Self {\n        Curve::zero()\n    }\n}\n\nimpl<Params> std::ops::Add for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self + other`\n    ///\n    /// Cost: 7 gates\n    fn add(self, other: Self) -> Self {\n        Curve::add_internal(self, other, Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::ops::Neg for Curve<Params> {\n    /// Negate a point\n    ///\n    /// Cost: usually 0, will cost 1 gate if the `x` coordinate needs to be converted into a witness\n    fn neg(self) -> Self {\n        Curve { x: -self.x, y: self.y }\n    }\n}\n\nimpl<Params> std::ops::Sub for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self - other`\n    ///\n    /// Cost: 7 gates\n    fn sub(self, other: Self) -> Self {\n        Curve::add_internal(self, other.neg(), Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::cmp::Eq for Curve<Params> {\n    /// Compute `self == other`\n    ///\n    /// Cost: 6 gates\n    fn eq(self, other: Self) -> bool {\n        (self.x == other.x) & (self.y == other.y)\n    }\n}\n\nimpl<Params> std::convert::From<(Field, Field)> for Curve<Params> {\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    ///\n    /// Cost: 0 gates\n    fn from((x, y): (Field, Field)) -> Self {\n        Curve { x, y }\n    }\n}\n\nimpl<Params> CurveTrait<Params> for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n\n    /// Construct a new point\n    ///\n    /// If you know the x/y coords form a valid point DO NOT USE THIS METHOD\n    /// This method calls `assert_is_on_curve` which costs 3 gates.\n    /// Instead, directly construct via Curve{x, y} or use from((x, y))\n    ///\n    /// Cost: 3 gates\n    fn new(x: Field, y: Field) -> Self {\n        let result = Curve { x, y };\n        result.assert_is_on_curve();\n        result\n    }\n\n    /// Return the Identity element (point at infinity)\n    ///\n    /// Cost: 0 gates\n    fn zero() -> Self {\n        Curve { x: 0, y: 1 }\n    }\n\n    /// Return the Generator of the group\n    ///\n    /// Cost: 0 gates (assuming Params trait returns values known at compile time!)\n    fn one() -> Self {\n        let (x, y) = Params::gen();\n        Curve { x, y }\n    }\n\n    /// Validate a point is on the curve\n    ///\n    /// cheaper than `is_on_curve` (assert is cheaper than returning a bool)\n    ///\n    /// Cost: 3 gates\n    fn assert_is_on_curve(self) {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        assert(t2 == t3);\n    }\n\n    /// Constrain two points to equal each other\n    ///\n    /// Cheaper than `assert(self == other)` because no need to return a bool\n    ///\n    /// Cost: 0-2 gates (can do these asserts with just copy constraints)\n    fn assert_equal(self, other: Self) {\n        assert(self.x == other.x);\n        assert(self.y == other.y);\n    }\n\n    /// Return a bool that describes whether the point is on the curve\n    ///\n    /// If you don't need to handle the failure case, it is cheaper to call `assert_is_on_curve`\n    ///\n    /// Cost: 5 gates\n    fn is_on_curve(self) -> bool {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        (t2 == t3)\n    }\n\n    /// Compute `self + self`\n    ///\n    /// Cost: 5 gates\n    fn dbl(self) -> Self {\n        Curve::dbl_internal(self, Params::a(), Params::d())\n    }\n\n    /// Compute `self * scalar`\n    ///\n    /// Uses the Straus method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows:\n    ///      1: computing the Straus point lookup table (169 gates)\n    ///      2: 252 point doublings (1260 gates)\n    ///      3: 63 point additions (441 gates)\n    ///      4: 126 table reads with runtime index (252 gates)\n    ///\n    /// Cost: 2122 gates + cost of creating ScalarField (110 gates)\n    fn mul<let NScalarSlices: u32>(self: Self, scalar: ScalarField<NScalarSlices>) -> Self {\n        // define a, d params locally to make code more readable (shouldn't affect performance)\n        let a = Params::a();\n        let d = Params::d();\n\n        // Construct tables of precomputed point coordinates.\n        let (table_x, table_y): ([Field; 16], [Field; 16]) = self.compute_straus_point_table(a, d);\n\n        // Initialize the accumulator with the point that maps to the first (most significant) scalar slice\n        let idx = scalar.base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: table_x[idx], y: table_y[idx] };\n\n        // Execute a double-and-add subroutine\n        // 1. Compute `accumulator = accumulator * 16`\n        // 2. Extract 4-bits from the scalar multiplier and\n        //    use them to retrieve the corresponding point from our point table\n        // Note: this is similar to the \"double and add\" scalar multiplication method, except we use base16 instead of base2!\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            let idx = scalar.base4_slices[i] as u32;\n            let x = table_x[idx];\n            let y = table_y[idx];\n            accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n        }\n\n        // todo fix\n        if (scalar.skew) {\n            accumulator = accumulator - self;\n        }\n        accumulator\n    }\n\n    /// compute `points[0] * scalar[0] + ... + points[N-1] * scalar[N-1]`\n    ///\n    /// Is cheaper than `mul` when processing >1 point due to reduced number of point doublings\n    /// uses the Straus MSM method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows\n    /// PER POINT costs:\n    ///      1: computing the Straus point lookup table (169N gates)\n    ///      2: 63 point additions (441N gates)\n    ///      3: 126 table reads with runtime index (252N gates)\n    ///\n    /// Additional costs:\n    ///      1. 252 point doublings 1260 gates\n    ///\n    /// Cost: 1260 + 862N + cost of creating ScalarField (110N gates)\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self {\n        let a = Params::a();\n        let d = Params::d();\n\n        // Generalized version of `mul` for multiple points.\n        let mut point_tables: [([Field; 16], [Field; 16]); N] = [([0; 16], [0; 16]); N];\n        for j in 0..N {\n            point_tables[j] = points[j].compute_straus_point_table(a, d);\n        }\n\n        let idx = scalars[0].base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: point_tables[0].0[idx], y: point_tables[0].1[idx] };\n        for j in 1..N {\n            let idx = scalars[j].base4_slices[0] as u32;\n            let P = Curve { x: point_tables[j].0[idx], y: point_tables[j].1[idx] };\n            accumulator = accumulator.add_internal(P, a, d);\n        }\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            for j in 0..N {\n                let idx = scalars[j].base4_slices[i] as u32;\n                let x = point_tables[j].0[idx];\n                let y = point_tables[j].1[idx];\n                accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n            }\n        }\n\n        for j in 0..N {\n            if (scalars[j].skew == true) {\n                accumulator = accumulator - points[j];\n            }\n        }\n        accumulator\n    }\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### H E L P E R    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> Curve<Params> {\n\n    /// add two points together\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `add` :(\n    fn add_internal(self, other: Self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let x2 = other.x;\n        let y1 = self.y;\n        let y2 = other.y;\n        let (x, y, lambda) = unsafe { __add_unconstrained(x1, x2, y1, y2, a, d) };\n        let x1x2 = x1 * x2;\n        let x1y2 = x1 * y2;\n        std::as_witness(x1x2);\n        std::as_witness(x1y2);\n        let x_lhs = x * lambda * d + x - x1y2; // equals y1x2\n        let y_lhs = y * lambda * -d + y + x1x2 * a; // equals y1y2\n        let y1x2 = y1 * x2;\n        let y1y2 = y1 * y2;\n        std::as_witness(y1x2);\n        std::as_witness(y1y2);\n        let y1y2x1x2 = y1y2 * x1x2;\n        assert(x_lhs == y1x2);\n        assert(y_lhs == y1y2);\n        assert(y1y2x1x2 == lambda);\n        Self { x, y }\n    }\n\n    /// add a point to itself\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `dbl` :(\n    fn dbl_internal(self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let y1 = self.y;\n        let (x3, y3, _) = unsafe { __add_unconstrained(x1, x1, y1, y1, a, d) };\n        let x1x1a = x1 * x1 * a;\n        std::as_witness(x1x1a);\n        // t1 = a*x_1^2 + y_1^2\n        let t1 = y1 * y1 + x1x1a;\n        std::as_witness(t1);\n        // t3 = y_3 * (2 - a*x_1^2 + y_1^2) + 2*a*x_1^2\n        let t3 = y3 + y3 - t1 * y3 + x1x1a * 2;\n        // t3 == t1 implies y_3 * (2 - a*x_1^2 - y_1^2) + 2*a*x_1^2 == a*x_1^2 + y_1^2\n        // i.e. y_3 = y_1^2 - a*x_1^2 / (2 - a*x_1^2 - y_1^2)\n        assert(t3 == t1);\n        let t4 = x1 * y1;\n        std::as_witness(t4);\n        // x3 * t1 - t4 == t4 implies x_3 * (y_1^2 + a * x_1^2) = 2 * x_1 * y_1\n        // i.e. x_3 = 2 * x_1 * y_1 / (y_1^2 + a * x_1^2)\n        let t2 = x3 * t1 - t4;\n        assert(t2 == t4);\n        Self { x: x3, y: y3 }\n    }\n\n    /// Compute a 4-bit lookup table of point multiples for the Straus windowed scalar multiplication algorithm.\n    ///\n    /// Table contains [0, P, 2P, ..., 15P], which is used in the scalar mul algorithm to minimize the total number of required point additions\n    ///\n    /// It is cheaper to use ([Field; 16], [Field; 16]) than it is ([Curve; 16]).\n    /// This is because the compiler will represent [Curve; 16] in 1 ROM array (vs 2 for [Field; 16], [Field; 16]).\n    /// This means that any index into the ROM array for [Curve; 16] requires an additional arithmetic gate to process.\n    ///\n    ///      For example consider `let P: Curve = table[idx]`\n    ///      `table` will be a ROM array with 32 elements in it.\n    ///      The x-coordinates will be located at `2 * idx`\n    ///      The y-coordinates will be located at `2 * idx + 1`\n    ///      If `idx` is not known at compile time (for Straus it isnt), 2 arithmetic gates are required to evaluate `2 * idx`, `2 * idx + 1`\n    ///      before they can be used as arguments in a memory lookup protocol\n    ///\n    ///      Now consider `let P_x = table_x[idx]; let P_y = table_y[idx]`\n    ///      In this example, `idx` can be directly used as the argument into a memory lookup protocol for both tables.\n    ///\n    ///      For the Barretenberg backend, the cost of a Read-Only memory lookup is 2 gates,\n    ///      so splitting the x/y coordinates into separate tables means that the cost to lookup a point is 4 gates\n    ///      2 extra arithmetic gates would increase the cost by 50%, which we avoid by returning `([Field; 16], [Field; 16])` instead of `([Curve; 16])`\n    ///\n    /// Key cost components are as follows:\n    ///      1: Defining two size-16 lookup tables (2 gates per element, 32 elements = 64 gates)\n    ///      2: 15 point additions (7 * 5 = 105)\n    ///\n    /// Total Cost: 169 gates\n    fn compute_straus_point_table(self, a: Field, d: Field) -> ([Field; 16], [Field; 16]) {\n        let mut table_x: [Field; 16] = [0; 16];\n        let mut table_y: [Field; 16] = [0; 16];\n        table_x[8] = self.x;\n        table_y[8] = self.y;\n        let D = self.dbl_internal(a, d);\n        for i in 1..8 {\n            let Q = Self { x: table_x[7 + i], y: table_y[7 + i] };\n            let V = D.add_internal(Q, a, d);\n            table_x[8 + i] = V.x;\n            table_y[8 + i] = V.y;\n        }\n        for i in 0..8 {\n            table_x[i] = -table_x[15 - i];\n            table_y[i] = table_y[15 - i];\n        }\n        (table_x, table_y)\n    }\n}\n\n/// add points together, return output + lambda ter\nunconstrained fn __add_unconstrained(\n    x1: Field,\n    x2: Field,\n    y1: Field,\n    y2: Field,\n    a: Field,\n    d: Field,\n) -> (Field, Field, Field) {\n    let lambda = y1 * y2 * x1 * x2;\n    let y = (x1 * x2 * a - y1 * y2) / (lambda * d - 1);\n    let x = (x1 * y2 + y1 * x2) / (lambda * d + 1);\n    (x, y, lambda)\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/lib.nr"},"57":{"source":"use std::static_assert;\n\n/// ScalarField represents a scalar multiplier as a sequence of 4-bit slices\n///\n/// There is nuance to ScalarField, because twisted edwards curves generally have prime group orders that easily fit into a Field\n/// We can therefore obtain cheap conversions by simply summing up the bit slices and validate they equal the input scalar\n/// However...when converting arbitrary field elements (i.e. scalars that are multiples of a TE curve group order),\n/// we must perform additional checks when converting into 4-bit slices, as we must validate that the sum of the slices is smaller than the Field modulus (when evaluated over the integers)\n/// This is expensive and we would rather not do it! therefore ScalarField<N> is flexible.\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n///\n/// N.B. ScalarField bit values are not constrained to be smaller than the TE curve group order.\n/// ScalarField is used when performing scalar multiplications, where all operations wrap modulo the curve order\npub global TWO_POW_128: Field = 0x100000000000000000000000000000000;\npub global PLO: Field = 0x2833e84879b9709143e1f593f0000001;\npub global PHI: Field = 0x30644e72e131a029b85045b68181585d;\n\npub struct ScalarField<let N: u32> {\n    pub(crate) base4_slices: [u8; N],\n    pub(crate) skew: bool,\n}\n\nunconstrained fn get_wnaf_slices<let N: u32>(x: Field) -> ([u8; N], bool) {\n    let mut result: [u8; N] = [0; N];\n    let mut nibbles: [u8; N] = to_le_radix_16(x);\n\n    let skew: bool = nibbles[0] & 1 == 0;\n    nibbles[0] += skew as u8;\n    result[N - 1] = (nibbles[0] + 15) / 2;\n    for i in 1..N {\n        let mut nibble: u8 = nibbles[i];\n        result[N - 1 - i] = (nibble + 15) / 2;\n        if (nibble & 1 == 0) {\n            result[N - 1 - i] += 1;\n            result[N - i] -= 8;\n        }\n    }\n    (result, skew)\n}\n\nunconstrained fn from_wnaf_slices<let N: u32>(x: [u8; N], skew: bool) -> Field {\n    let mut result: Field = 0;\n\n    for i in 0..N {\n        result *= 16;\n        result += (x[i] as Field) * 2 - 15;\n    }\n    result -= skew as Field;\n    result\n}\n\nunconstrained fn get_borrow_flag(lhs_lo: Field, rhs_lo: Field) -> bool {\n    lhs_lo.lt(rhs_lo + 1)\n}\n\nunconstrained fn to_le_radix_16<let N: u32>(value: Field) -> [u8; N] {\n    // Round up on odd values of `N` to ensure space for last nibble.\n    let bytes = value.to_le_bytes::<(N + 1) / 2>();\n    let mut result: [u8; N] = [0; N];\n    for index in 0..(N / 2) {\n        result[index * 2] = bytes[index] & 0x0F; // Extract low nibble (bits 0-3)\n        result[index * 2 + 1] = (bytes[index] >> 4); // Extract high nibble (bits 4-7)\n    }\n    if (N & 1) == 1 {\n        let last_nibble = bytes[bytes.len() - 1];\n        // The last byte must have the top 4 bits empty.\n        (last_nibble as Field).assert_max_bit_size::<4>();\n        result[N - 1] = last_nibble;\n    }\n    result\n}\n\nimpl<let N: u32> std::convert::From<Field> for ScalarField<N> {\n\n    /// Construct from a field element\n    ///\n    /// if N >= 64 we perform extra checks to ensure the slice decomposition represents the same integral value as the input\n    /// (e.g. sum of slices != x + modulus)\n    fn from(x: Field) -> Self {\n        // the field elements have 254 bits max, so we do not need to support N > 64\n        static_assert(N <= 64, \"N must be at most 64\");\n        let mut result: Self = ScalarField { base4_slices: [0; N], skew: false };\n        let (slices, skew): ([u8; N], bool) = unsafe { get_wnaf_slices(x) };\n        result.base4_slices = slices;\n        result.skew = skew;\n        if (N < 64) {\n            let mut acc: Field = (slices[0] as Field) * 2 - 15;\n            for i in 1..N {\n                acc *= 16;\n                acc += (slices[i] as Field) * 2 - 15;\n            }\n            assert(acc - skew as Field == x);\n        } else {\n            // TODO: if num bits = 64, validate in sum of the bits is smaller than the Field modulus\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n\n            for i in 0..32 {\n                lo *= 16;\n                lo += (slices[32 + i] as Field) * 2 - 15;\n                hi *= 16;\n                hi += (slices[i] as Field) * 2 - 15;\n            }\n\n            lo -= skew as Field;\n            // Validate that the integer represented by (lo, hi) is smaller than the integer represented by (plo, phi)\n\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            // Safety: we assert that the absolute value has less than 128 bits\n            let is_positive: bool = unsafe { get_borrow_flag(lo, TWO_POW_128) };\n\n            let abs_lo = (is_positive as Field) * lo + (1 - is_positive as Field) * (-lo);\n\n            abs_lo.assert_max_bit_size::<128>();\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            let borrow = unsafe { get_borrow_flag(PLO, abs_lo) as Field };\n            // we only need to check the rlo has 128 bits or less if lo is positive. if negative, the lo is already less than PLO\n            let rlo = is_positive as Field * (PLO - lo + borrow * TWO_POW_128 - 1)\n                + (1 - is_positive as Field) * (-lo); // -1 because we are checking a strict <, not <=\n            // is lo is positive, we need to check the hi is less than phi with the borrow flag subtracted\n            // if lo is negative, we have to check that hi * 2^128 < phi * 2^128 + abs_lo + plo\n            // to do this we first make a flag to check that abs_lo + plo is larger than 2^128 or not\n            // if they are larger, we check that hi < phi + 1 and otherwise we check that hi < phi\n            // Safety: we assert the when the flag is positive we have less than 128 bits\n            let threshold_flag: bool = unsafe { get_borrow_flag(abs_lo + PLO, TWO_POW_128) };\n            (threshold_flag as Field * (abs_lo + PLO)).assert_max_bit_size::<128>();\n            let rhi = is_positive as Field * (PHI - hi - borrow)\n                + (1 - is_positive as Field) * (PHI - hi + threshold_flag as Field);\n            // the rlo value would have 128 bits or less if positive and more if negative as the modulus is 254 bits\n            rlo.assert_max_bit_size::<128>();\n            rhi.assert_max_bit_size::<128>();\n        }\n        for i in 0..N {\n            (result.base4_slices[i] as Field).assert_max_bit_size::<4>();\n        }\n        result\n    }\n}\n\nimpl<let N: u32> std::convert::Into<Field> for ScalarField<N> {\n\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    fn into(self: Self) -> Field {\n        let mut acc: Field = 0;\n        for i in 0..N {\n            acc = acc * 16;\n            acc = acc + (self.base4_slices[i] as Field) * 2 - 15;\n        }\n        acc -= self.skew as Field;\n        acc\n    }\n}\n\nimpl<let N: u32> ScalarField<N> {\n\n    pub fn new() -> Self {\n        Self { base4_slices: [0; N], skew: false }\n    }\n    fn get(self, idx: u32) -> u8 {\n        self.base4_slices[idx]\n    }\n}\n\n#[test]\nunconstrained fn test_wnaf() {\n    let result: Field = 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0;\n    let (t0, t1) = get_wnaf_slices::<64>(result);\n    let expected = from_wnaf_slices(t0, t1);\n    assert_eq(result, expected);\n}\n\n#[test]\nfn test_regression_wnaf() {\n    let a = 0x7b;\n    let s: ScalarField<64> = ScalarField::<64>::from(a);\n    let b: Field = ScalarField::<64>::into(s);\n    assert_eq(a, b);\n}\n\n#[test]\nunconstrained fn to_le_radix_16_works_with_odd_N() {\n    let input = 0x0f00;\n    let nibbles: [u8; 3] = to_le_radix_16(input);\n    assert_eq(nibbles, [0x0, 0x0, 0xf]);\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/scalar_field.nr"}}};

export async function derive_public_key(private_key: Field, foreignCallHandler?: ForeignCallHandler): Promise<Field[]> {
  const program = new Noir(derive_public_key_circuit);
  const args: InputMap = { private_key };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field[];
}
export type derive_shared_keyInputType = {
  private_key: Field;
  public_key_packed: Field[];
}

export type derive_shared_keyReturnType = Field;
export const derive_shared_key_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"private_key","type":{"kind":"field"},"visibility":"private"},{"name":"public_key_packed","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"private"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"51":{"source":"use noir_edwards::{ScalarField, bjj::BabyJubJub, Curve, CurveTrait};\nuse super::utils::poseidon2_hash;\n\n// [8]G precalculated\nglobal BASE8_POINT: [Field; 2] = [\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n];\n\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n\n#[field(bn254)]\npub fn derive_public_key(private_key: Field) -> [Field; 2] {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let base8_point: BabyJubJub = Curve::new(BASE8_POINT[0], BASE8_POINT[1]);\n    let point = base8_point.mul(private_scalar);\n    [point.x, point.y]\n}\n\n#[field(bn254)]\npub fn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let point: BabyJubJub = Curve::new(public_key_packed[0], public_key_packed[1]);\n    let shared_key = point.mul(private_scalar);\n    shared_key.x\n}\n\n#[test]\nfn test_e2e() {\n    let a_key = poseidon2_hash([0]);\n    let a_pubkey = derive_public_key(a_key);\n\n    let b_key = poseidon2_hash([1]);\n    let b_pubkey = derive_public_key(b_key);\n\n    let key_1 = derive_shared_key(a_key, b_pubkey);\n    let key_2 = derive_shared_key(b_key, a_pubkey);\n\n    assert(key_1 == key_2);\n\n    println(f\"Alice public key: {a_pubkey}\");\n    println(f\"Alice private key: {a_key}\");\n    println(\"\");\n    println(f\"Bob public key: {b_pubkey}\");\n    println(\"\");\n    println(f\"Shared Key 1: {key_1}\");\n    println(f\"Shared Key 2: {key_2}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/ecdh.nr"},"52":{"source":"use super::cipher::poseidon_decrypt;\n\n#[export]\npub fn get_key_commitment(key: [Field; 2], salt: Field) -> Field {\n    super::utils::commit(key, salt)\n}\n\n// #[export]\n// fn encrypt_key(master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::encrypt_single(master_key, key, nonce, 0)\n// }\n\n// #[export]\n// fn decrypt_key(enc_master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::decrypt_single(enc_master_key, key, nonce, 0)\n// }\n\n#[export]\npub fn decrypt_packet(\n    ciphers: [Field; 510 + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; 510] {\n    poseidon_decrypt(ciphers, key, nonce)\n}\n\n#[export]\nfn derive_public_key(private_key: Field) -> [Field; 2] {\n    super::ecdh::derive_public_key(private_key)\n}\n\n#[export]\nfn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    super::ecdh::derive_shared_key(private_key, public_key_packed)\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/exports.nr"},"56":{"source":"mod scalar_field;\nmod test;\npub mod bjj;\n\npub use crate::scalar_field::ScalarField;\nuse std::ops::{Add, Neg, Sub};\n\npub struct Curve<Params> {\n    pub x: Field,\n    pub y: Field,\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### T R A I T S\n// ####################################################################################################################\n// ####################################################################################################################\n\n/// Parametrises a Twisted Edwards curve\ntrait TECurveParameterTrait {\n    fn a() -> Field; // twisted edward curve parameter a\n    fn d() -> Field; // twisted edward curve parameter d\n    fn gen() -> (Field, Field); // generator point x/y coordinates\n}\n\n/// Defines methods that a valid Curve implementation must satisfy\npub trait CurveTrait<Params>: Add + Sub + Eq + Neg + Default {\n    fn new(x: Field, y: Field) -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn dbl(self) -> Self;\n    fn mul<let NScalarSlices: u32>(self, x: ScalarField<NScalarSlices>) -> Self;\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self;\n\n    fn eq(self, x: Self) -> bool {\n        self == x\n    }\n    fn is_zero(self) -> bool {\n        self == Self::zero()\n    }\n\n    fn is_on_curve(self) -> bool;\n    fn assert_is_on_curve(self);\n    fn assert_equal(self, other: Self);\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### C O N S T R A I N E D    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> std::default::Default for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Returns point at infinity\n    ///\n    /// Cost: 0 gates\n    fn default() -> Self {\n        Curve::zero()\n    }\n}\n\nimpl<Params> std::ops::Add for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self + other`\n    ///\n    /// Cost: 7 gates\n    fn add(self, other: Self) -> Self {\n        Curve::add_internal(self, other, Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::ops::Neg for Curve<Params> {\n    /// Negate a point\n    ///\n    /// Cost: usually 0, will cost 1 gate if the `x` coordinate needs to be converted into a witness\n    fn neg(self) -> Self {\n        Curve { x: -self.x, y: self.y }\n    }\n}\n\nimpl<Params> std::ops::Sub for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self - other`\n    ///\n    /// Cost: 7 gates\n    fn sub(self, other: Self) -> Self {\n        Curve::add_internal(self, other.neg(), Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::cmp::Eq for Curve<Params> {\n    /// Compute `self == other`\n    ///\n    /// Cost: 6 gates\n    fn eq(self, other: Self) -> bool {\n        (self.x == other.x) & (self.y == other.y)\n    }\n}\n\nimpl<Params> std::convert::From<(Field, Field)> for Curve<Params> {\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    ///\n    /// Cost: 0 gates\n    fn from((x, y): (Field, Field)) -> Self {\n        Curve { x, y }\n    }\n}\n\nimpl<Params> CurveTrait<Params> for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n\n    /// Construct a new point\n    ///\n    /// If you know the x/y coords form a valid point DO NOT USE THIS METHOD\n    /// This method calls `assert_is_on_curve` which costs 3 gates.\n    /// Instead, directly construct via Curve{x, y} or use from((x, y))\n    ///\n    /// Cost: 3 gates\n    fn new(x: Field, y: Field) -> Self {\n        let result = Curve { x, y };\n        result.assert_is_on_curve();\n        result\n    }\n\n    /// Return the Identity element (point at infinity)\n    ///\n    /// Cost: 0 gates\n    fn zero() -> Self {\n        Curve { x: 0, y: 1 }\n    }\n\n    /// Return the Generator of the group\n    ///\n    /// Cost: 0 gates (assuming Params trait returns values known at compile time!)\n    fn one() -> Self {\n        let (x, y) = Params::gen();\n        Curve { x, y }\n    }\n\n    /// Validate a point is on the curve\n    ///\n    /// cheaper than `is_on_curve` (assert is cheaper than returning a bool)\n    ///\n    /// Cost: 3 gates\n    fn assert_is_on_curve(self) {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        assert(t2 == t3);\n    }\n\n    /// Constrain two points to equal each other\n    ///\n    /// Cheaper than `assert(self == other)` because no need to return a bool\n    ///\n    /// Cost: 0-2 gates (can do these asserts with just copy constraints)\n    fn assert_equal(self, other: Self) {\n        assert(self.x == other.x);\n        assert(self.y == other.y);\n    }\n\n    /// Return a bool that describes whether the point is on the curve\n    ///\n    /// If you don't need to handle the failure case, it is cheaper to call `assert_is_on_curve`\n    ///\n    /// Cost: 5 gates\n    fn is_on_curve(self) -> bool {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        (t2 == t3)\n    }\n\n    /// Compute `self + self`\n    ///\n    /// Cost: 5 gates\n    fn dbl(self) -> Self {\n        Curve::dbl_internal(self, Params::a(), Params::d())\n    }\n\n    /// Compute `self * scalar`\n    ///\n    /// Uses the Straus method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows:\n    ///      1: computing the Straus point lookup table (169 gates)\n    ///      2: 252 point doublings (1260 gates)\n    ///      3: 63 point additions (441 gates)\n    ///      4: 126 table reads with runtime index (252 gates)\n    ///\n    /// Cost: 2122 gates + cost of creating ScalarField (110 gates)\n    fn mul<let NScalarSlices: u32>(self: Self, scalar: ScalarField<NScalarSlices>) -> Self {\n        // define a, d params locally to make code more readable (shouldn't affect performance)\n        let a = Params::a();\n        let d = Params::d();\n\n        // Construct tables of precomputed point coordinates.\n        let (table_x, table_y): ([Field; 16], [Field; 16]) = self.compute_straus_point_table(a, d);\n\n        // Initialize the accumulator with the point that maps to the first (most significant) scalar slice\n        let idx = scalar.base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: table_x[idx], y: table_y[idx] };\n\n        // Execute a double-and-add subroutine\n        // 1. Compute `accumulator = accumulator * 16`\n        // 2. Extract 4-bits from the scalar multiplier and\n        //    use them to retrieve the corresponding point from our point table\n        // Note: this is similar to the \"double and add\" scalar multiplication method, except we use base16 instead of base2!\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            let idx = scalar.base4_slices[i] as u32;\n            let x = table_x[idx];\n            let y = table_y[idx];\n            accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n        }\n\n        // todo fix\n        if (scalar.skew) {\n            accumulator = accumulator - self;\n        }\n        accumulator\n    }\n\n    /// compute `points[0] * scalar[0] + ... + points[N-1] * scalar[N-1]`\n    ///\n    /// Is cheaper than `mul` when processing >1 point due to reduced number of point doublings\n    /// uses the Straus MSM method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows\n    /// PER POINT costs:\n    ///      1: computing the Straus point lookup table (169N gates)\n    ///      2: 63 point additions (441N gates)\n    ///      3: 126 table reads with runtime index (252N gates)\n    ///\n    /// Additional costs:\n    ///      1. 252 point doublings 1260 gates\n    ///\n    /// Cost: 1260 + 862N + cost of creating ScalarField (110N gates)\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self {\n        let a = Params::a();\n        let d = Params::d();\n\n        // Generalized version of `mul` for multiple points.\n        let mut point_tables: [([Field; 16], [Field; 16]); N] = [([0; 16], [0; 16]); N];\n        for j in 0..N {\n            point_tables[j] = points[j].compute_straus_point_table(a, d);\n        }\n\n        let idx = scalars[0].base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: point_tables[0].0[idx], y: point_tables[0].1[idx] };\n        for j in 1..N {\n            let idx = scalars[j].base4_slices[0] as u32;\n            let P = Curve { x: point_tables[j].0[idx], y: point_tables[j].1[idx] };\n            accumulator = accumulator.add_internal(P, a, d);\n        }\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            for j in 0..N {\n                let idx = scalars[j].base4_slices[i] as u32;\n                let x = point_tables[j].0[idx];\n                let y = point_tables[j].1[idx];\n                accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n            }\n        }\n\n        for j in 0..N {\n            if (scalars[j].skew == true) {\n                accumulator = accumulator - points[j];\n            }\n        }\n        accumulator\n    }\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### H E L P E R    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> Curve<Params> {\n\n    /// add two points together\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `add` :(\n    fn add_internal(self, other: Self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let x2 = other.x;\n        let y1 = self.y;\n        let y2 = other.y;\n        let (x, y, lambda) = unsafe { __add_unconstrained(x1, x2, y1, y2, a, d) };\n        let x1x2 = x1 * x2;\n        let x1y2 = x1 * y2;\n        std::as_witness(x1x2);\n        std::as_witness(x1y2);\n        let x_lhs = x * lambda * d + x - x1y2; // equals y1x2\n        let y_lhs = y * lambda * -d + y + x1x2 * a; // equals y1y2\n        let y1x2 = y1 * x2;\n        let y1y2 = y1 * y2;\n        std::as_witness(y1x2);\n        std::as_witness(y1y2);\n        let y1y2x1x2 = y1y2 * x1x2;\n        assert(x_lhs == y1x2);\n        assert(y_lhs == y1y2);\n        assert(y1y2x1x2 == lambda);\n        Self { x, y }\n    }\n\n    /// add a point to itself\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `dbl` :(\n    fn dbl_internal(self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let y1 = self.y;\n        let (x3, y3, _) = unsafe { __add_unconstrained(x1, x1, y1, y1, a, d) };\n        let x1x1a = x1 * x1 * a;\n        std::as_witness(x1x1a);\n        // t1 = a*x_1^2 + y_1^2\n        let t1 = y1 * y1 + x1x1a;\n        std::as_witness(t1);\n        // t3 = y_3 * (2 - a*x_1^2 + y_1^2) + 2*a*x_1^2\n        let t3 = y3 + y3 - t1 * y3 + x1x1a * 2;\n        // t3 == t1 implies y_3 * (2 - a*x_1^2 - y_1^2) + 2*a*x_1^2 == a*x_1^2 + y_1^2\n        // i.e. y_3 = y_1^2 - a*x_1^2 / (2 - a*x_1^2 - y_1^2)\n        assert(t3 == t1);\n        let t4 = x1 * y1;\n        std::as_witness(t4);\n        // x3 * t1 - t4 == t4 implies x_3 * (y_1^2 + a * x_1^2) = 2 * x_1 * y_1\n        // i.e. x_3 = 2 * x_1 * y_1 / (y_1^2 + a * x_1^2)\n        let t2 = x3 * t1 - t4;\n        assert(t2 == t4);\n        Self { x: x3, y: y3 }\n    }\n\n    /// Compute a 4-bit lookup table of point multiples for the Straus windowed scalar multiplication algorithm.\n    ///\n    /// Table contains [0, P, 2P, ..., 15P], which is used in the scalar mul algorithm to minimize the total number of required point additions\n    ///\n    /// It is cheaper to use ([Field; 16], [Field; 16]) than it is ([Curve; 16]).\n    /// This is because the compiler will represent [Curve; 16] in 1 ROM array (vs 2 for [Field; 16], [Field; 16]).\n    /// This means that any index into the ROM array for [Curve; 16] requires an additional arithmetic gate to process.\n    ///\n    ///      For example consider `let P: Curve = table[idx]`\n    ///      `table` will be a ROM array with 32 elements in it.\n    ///      The x-coordinates will be located at `2 * idx`\n    ///      The y-coordinates will be located at `2 * idx + 1`\n    ///      If `idx` is not known at compile time (for Straus it isnt), 2 arithmetic gates are required to evaluate `2 * idx`, `2 * idx + 1`\n    ///      before they can be used as arguments in a memory lookup protocol\n    ///\n    ///      Now consider `let P_x = table_x[idx]; let P_y = table_y[idx]`\n    ///      In this example, `idx` can be directly used as the argument into a memory lookup protocol for both tables.\n    ///\n    ///      For the Barretenberg backend, the cost of a Read-Only memory lookup is 2 gates,\n    ///      so splitting the x/y coordinates into separate tables means that the cost to lookup a point is 4 gates\n    ///      2 extra arithmetic gates would increase the cost by 50%, which we avoid by returning `([Field; 16], [Field; 16])` instead of `([Curve; 16])`\n    ///\n    /// Key cost components are as follows:\n    ///      1: Defining two size-16 lookup tables (2 gates per element, 32 elements = 64 gates)\n    ///      2: 15 point additions (7 * 5 = 105)\n    ///\n    /// Total Cost: 169 gates\n    fn compute_straus_point_table(self, a: Field, d: Field) -> ([Field; 16], [Field; 16]) {\n        let mut table_x: [Field; 16] = [0; 16];\n        let mut table_y: [Field; 16] = [0; 16];\n        table_x[8] = self.x;\n        table_y[8] = self.y;\n        let D = self.dbl_internal(a, d);\n        for i in 1..8 {\n            let Q = Self { x: table_x[7 + i], y: table_y[7 + i] };\n            let V = D.add_internal(Q, a, d);\n            table_x[8 + i] = V.x;\n            table_y[8 + i] = V.y;\n        }\n        for i in 0..8 {\n            table_x[i] = -table_x[15 - i];\n            table_y[i] = table_y[15 - i];\n        }\n        (table_x, table_y)\n    }\n}\n\n/// add points together, return output + lambda ter\nunconstrained fn __add_unconstrained(\n    x1: Field,\n    x2: Field,\n    y1: Field,\n    y2: Field,\n    a: Field,\n    d: Field,\n) -> (Field, Field, Field) {\n    let lambda = y1 * y2 * x1 * x2;\n    let y = (x1 * x2 * a - y1 * y2) / (lambda * d - 1);\n    let x = (x1 * y2 + y1 * x2) / (lambda * d + 1);\n    (x, y, lambda)\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/lib.nr"},"57":{"source":"use std::static_assert;\n\n/// ScalarField represents a scalar multiplier as a sequence of 4-bit slices\n///\n/// There is nuance to ScalarField, because twisted edwards curves generally have prime group orders that easily fit into a Field\n/// We can therefore obtain cheap conversions by simply summing up the bit slices and validate they equal the input scalar\n/// However...when converting arbitrary field elements (i.e. scalars that are multiples of a TE curve group order),\n/// we must perform additional checks when converting into 4-bit slices, as we must validate that the sum of the slices is smaller than the Field modulus (when evaluated over the integers)\n/// This is expensive and we would rather not do it! therefore ScalarField<N> is flexible.\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n///\n/// N.B. ScalarField bit values are not constrained to be smaller than the TE curve group order.\n/// ScalarField is used when performing scalar multiplications, where all operations wrap modulo the curve order\npub global TWO_POW_128: Field = 0x100000000000000000000000000000000;\npub global PLO: Field = 0x2833e84879b9709143e1f593f0000001;\npub global PHI: Field = 0x30644e72e131a029b85045b68181585d;\n\npub struct ScalarField<let N: u32> {\n    pub(crate) base4_slices: [u8; N],\n    pub(crate) skew: bool,\n}\n\nunconstrained fn get_wnaf_slices<let N: u32>(x: Field) -> ([u8; N], bool) {\n    let mut result: [u8; N] = [0; N];\n    let mut nibbles: [u8; N] = to_le_radix_16(x);\n\n    let skew: bool = nibbles[0] & 1 == 0;\n    nibbles[0] += skew as u8;\n    result[N - 1] = (nibbles[0] + 15) / 2;\n    for i in 1..N {\n        let mut nibble: u8 = nibbles[i];\n        result[N - 1 - i] = (nibble + 15) / 2;\n        if (nibble & 1 == 0) {\n            result[N - 1 - i] += 1;\n            result[N - i] -= 8;\n        }\n    }\n    (result, skew)\n}\n\nunconstrained fn from_wnaf_slices<let N: u32>(x: [u8; N], skew: bool) -> Field {\n    let mut result: Field = 0;\n\n    for i in 0..N {\n        result *= 16;\n        result += (x[i] as Field) * 2 - 15;\n    }\n    result -= skew as Field;\n    result\n}\n\nunconstrained fn get_borrow_flag(lhs_lo: Field, rhs_lo: Field) -> bool {\n    lhs_lo.lt(rhs_lo + 1)\n}\n\nunconstrained fn to_le_radix_16<let N: u32>(value: Field) -> [u8; N] {\n    // Round up on odd values of `N` to ensure space for last nibble.\n    let bytes = value.to_le_bytes::<(N + 1) / 2>();\n    let mut result: [u8; N] = [0; N];\n    for index in 0..(N / 2) {\n        result[index * 2] = bytes[index] & 0x0F; // Extract low nibble (bits 0-3)\n        result[index * 2 + 1] = (bytes[index] >> 4); // Extract high nibble (bits 4-7)\n    }\n    if (N & 1) == 1 {\n        let last_nibble = bytes[bytes.len() - 1];\n        // The last byte must have the top 4 bits empty.\n        (last_nibble as Field).assert_max_bit_size::<4>();\n        result[N - 1] = last_nibble;\n    }\n    result\n}\n\nimpl<let N: u32> std::convert::From<Field> for ScalarField<N> {\n\n    /// Construct from a field element\n    ///\n    /// if N >= 64 we perform extra checks to ensure the slice decomposition represents the same integral value as the input\n    /// (e.g. sum of slices != x + modulus)\n    fn from(x: Field) -> Self {\n        // the field elements have 254 bits max, so we do not need to support N > 64\n        static_assert(N <= 64, \"N must be at most 64\");\n        let mut result: Self = ScalarField { base4_slices: [0; N], skew: false };\n        let (slices, skew): ([u8; N], bool) = unsafe { get_wnaf_slices(x) };\n        result.base4_slices = slices;\n        result.skew = skew;\n        if (N < 64) {\n            let mut acc: Field = (slices[0] as Field) * 2 - 15;\n            for i in 1..N {\n                acc *= 16;\n                acc += (slices[i] as Field) * 2 - 15;\n            }\n            assert(acc - skew as Field == x);\n        } else {\n            // TODO: if num bits = 64, validate in sum of the bits is smaller than the Field modulus\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n\n            for i in 0..32 {\n                lo *= 16;\n                lo += (slices[32 + i] as Field) * 2 - 15;\n                hi *= 16;\n                hi += (slices[i] as Field) * 2 - 15;\n            }\n\n            lo -= skew as Field;\n            // Validate that the integer represented by (lo, hi) is smaller than the integer represented by (plo, phi)\n\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            // Safety: we assert that the absolute value has less than 128 bits\n            let is_positive: bool = unsafe { get_borrow_flag(lo, TWO_POW_128) };\n\n            let abs_lo = (is_positive as Field) * lo + (1 - is_positive as Field) * (-lo);\n\n            abs_lo.assert_max_bit_size::<128>();\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            let borrow = unsafe { get_borrow_flag(PLO, abs_lo) as Field };\n            // we only need to check the rlo has 128 bits or less if lo is positive. if negative, the lo is already less than PLO\n            let rlo = is_positive as Field * (PLO - lo + borrow * TWO_POW_128 - 1)\n                + (1 - is_positive as Field) * (-lo); // -1 because we are checking a strict <, not <=\n            // is lo is positive, we need to check the hi is less than phi with the borrow flag subtracted\n            // if lo is negative, we have to check that hi * 2^128 < phi * 2^128 + abs_lo + plo\n            // to do this we first make a flag to check that abs_lo + plo is larger than 2^128 or not\n            // if they are larger, we check that hi < phi + 1 and otherwise we check that hi < phi\n            // Safety: we assert the when the flag is positive we have less than 128 bits\n            let threshold_flag: bool = unsafe { get_borrow_flag(abs_lo + PLO, TWO_POW_128) };\n            (threshold_flag as Field * (abs_lo + PLO)).assert_max_bit_size::<128>();\n            let rhi = is_positive as Field * (PHI - hi - borrow)\n                + (1 - is_positive as Field) * (PHI - hi + threshold_flag as Field);\n            // the rlo value would have 128 bits or less if positive and more if negative as the modulus is 254 bits\n            rlo.assert_max_bit_size::<128>();\n            rhi.assert_max_bit_size::<128>();\n        }\n        for i in 0..N {\n            (result.base4_slices[i] as Field).assert_max_bit_size::<4>();\n        }\n        result\n    }\n}\n\nimpl<let N: u32> std::convert::Into<Field> for ScalarField<N> {\n\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    fn into(self: Self) -> Field {\n        let mut acc: Field = 0;\n        for i in 0..N {\n            acc = acc * 16;\n            acc = acc + (self.base4_slices[i] as Field) * 2 - 15;\n        }\n        acc -= self.skew as Field;\n        acc\n    }\n}\n\nimpl<let N: u32> ScalarField<N> {\n\n    pub fn new() -> Self {\n        Self { base4_slices: [0; N], skew: false }\n    }\n    fn get(self, idx: u32) -> u8 {\n        self.base4_slices[idx]\n    }\n}\n\n#[test]\nunconstrained fn test_wnaf() {\n    let result: Field = 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0;\n    let (t0, t1) = get_wnaf_slices::<64>(result);\n    let expected = from_wnaf_slices(t0, t1);\n    assert_eq(result, expected);\n}\n\n#[test]\nfn test_regression_wnaf() {\n    let a = 0x7b;\n    let s: ScalarField<64> = ScalarField::<64>::from(a);\n    let b: Field = ScalarField::<64>::into(s);\n    assert_eq(a, b);\n}\n\n#[test]\nunconstrained fn to_le_radix_16_works_with_odd_N() {\n    let input = 0x0f00;\n    let nibbles: [u8; 3] = to_le_radix_16(input);\n    assert_eq(nibbles, [0x0, 0x0, 0xf]);\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/scalar_field.nr"}}};

export async function derive_shared_key(private_key: Field, public_key_packed: Field[], foreignCallHandler?: ForeignCallHandler): Promise<Field> {
  const program = new Noir(derive_shared_key_circuit);
  const args: InputMap = { private_key, public_key_packed };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field;
}
export type encrypt_packetInputType = {
  key_commit: Field;
  nonce: Field;
  plains: Field[];
  key: Field[];
  salt: Field;
}

export type encrypt_packetReturnType = Field[];
export const encrypt_packet_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"key_commit","type":{"kind":"field"},"visibility":"public"},{"name":"nonce","type":{"kind":"field"},"visibility":"public"},{"name":"plains","type":{"kind":"array","length":510,"type":{"kind":"field"}},"visibility":"private"},{"name":"key","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":511,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"50":{"source":"use super::utils::poseidon2_hash;\nuse poseidon::poseidon2_permutation;\n\n#[field(bn254)]\nfn compute_pad(key: Field, nonce: Field, counter: u32) -> Field {\n    poseidon2_hash([key, nonce, counter as Field])\n}\n\n#[field(bn254)]\npub fn encrypt_single(plains: Field, key: Field, nonce: Field, counter: u32) -> Field {\n    plains + compute_pad(key, nonce, counter)\n}\n\n#[field(bn254)]\npub fn decrypt_single(ciphers: Field, key: Field, nonce: Field, counter: u32) -> Field {\n    ciphers - compute_pad(key, nonce, counter)\n}\n\n#[field(bn254)]\npub fn encrypt<let N: u32>(plains: [Field; N], key: Field, nonce: Field) -> [Field; N] {\n    plains.mapi(|i, p| encrypt_single(p, key, nonce, i))\n}\n\n#[field(bn254)]\npub fn decrypt<let N: u32>(ciphers: [Field; N], key: Field, nonce: Field) -> [Field; N] {\n    ciphers.mapi(|i, c| decrypt_single(c, key, nonce, i))\n}\n\n#[field(bn254)]\npub fn poseidon_encrypt<let N: u32>(\n    plains: [Field; N],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; N + 1] {\n    assert(nonce.lt(0x100000000000000000000000000000000));\n\n    let padded_nonce = nonce + (N as Field) * 0x100000000000000000000000000000000;\n    let mut state: [Field; 4] = [0, key[0], key[1], padded_nonce];\n\n    let state_len = state.len();\n    assert(N >= state_len - 1);\n\n    let mut ciphers: [Field; N + 1] = [0; N + 1];\n\n    for i in 0..(N / (state_len - 1)) {\n        state = poseidon2_permutation(state, state_len);\n\n        for j in 1..state_len {\n            let index = i * (state_len - 1) + j - 1;\n            state[j] += plains[index];\n            ciphers[index] = state[j];\n        }\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    for i in (N - (N % (state_len - 1)))..N {\n        let index = (i % (state_len - 1)) + 1;\n        state[index] += plains[i];\n        ciphers[i] = state[index];\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    ciphers[N] = state[1];\n    ciphers\n}\n\n#[field(bn254)]\npub fn poseidon_decrypt<let N: u32>(\n    ciphers: [Field; N + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; N] {\n    assert(nonce.lt(0x100000000000000000000000000000000));\n\n    let padded_nonce = nonce + (N as Field) * 0x100000000000000000000000000000000;\n    let mut state: [Field; 4] = [0, key[0], key[1], padded_nonce];\n\n    let state_len = state.len();\n    assert(N >= state_len - 1);\n\n    let mut plains: [Field; N] = [0; N];\n\n    for i in 0..(N / (state_len - 1)) {\n        state = poseidon2_permutation(state, state_len);\n\n        for j in 1..state_len {\n            let index = i * (state_len - 1) + j - 1;\n            plains[index] = ciphers[index] - state[j];\n            state[j] = ciphers[index];\n        }\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    for i in (N - (N % (state_len - 1)))..N {\n        let index = (i % (state_len - 1)) + 1;\n        plains[i] = ciphers[i] - state[index];\n        state[index] = ciphers[i];\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    assert(ciphers[N] == state[1]);\n    plains\n}\n\n#[test]\nfn test_e2e() {\n    let key = 0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961;\n    let nonce = 1337;\n\n    let msg = [22405534230753963835153736737; 256]; // \"Hello world!\"\n    let encrypted = encrypt(msg, key, nonce);\n    let new_msg = decrypt(encrypted, key, nonce);\n\n    assert(msg == new_msg);\n\n    println(f\"Key: {key}\");\n    println(f\"nonce: {nonce}\");\n\n    println(f\"Original: {msg}\");\n    println(f\"Encrypted: {encrypted}\");\n    println(f\"Decrypted: {new_msg}\");\n}\n\n#[test]\nfn test_e2e_poseidon() {\n    let key: [Field; 2] = [\n        0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961,\n        0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961,\n    ];\n    let nonce = 1337;\n\n    let msg = [22405534230753963835153736737; 1024]; // \"Hello world!\"\n    let encrypted = poseidon_encrypt(msg, key, nonce);\n    let new_msg = poseidon_decrypt(encrypted, key, nonce);\n\n    assert(msg == new_msg);\n\n    println(f\"Key: {key}\");\n    println(f\"nonce: {nonce}\");\n\n    println(f\"Original: {msg}\");\n    println(f\"Encrypted: {encrypted}\");\n    println(f\"Decrypted: {new_msg}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/cipher.nr"},"54":{"source":"use poseidon::{poseidon2::Poseidon2};\n\n#[field(bn254)]\npub fn poseidon2_hash<let N: u32>(value: [Field; N]) -> Field {\n    Poseidon2::hash(value, N)\n}\n\n#[field(bn254)]\npub fn commit<let N: u32>(value: [Field; N], salt: Field) -> Field {\n    poseidon2_hash([poseidon2_hash(value), salt])\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/utils.nr"},"65":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"68":{"source":"use common::{cipher::poseidon_encrypt, utils::commit};\n\n/**\n\nBundle:\n  key_commit: field\n  packets: {encryptedData: bytes, nonce: field, proof: Proof}[]\n\n*/\n\nfn main(\n    key_commit: pub Field,\n    nonce: pub Field,\n    plains: [Field; 510],\n    key: [Field; 2],\n    salt: Field,\n) -> pub [Field; 510 + 1] {\n    assert(key_commit == commit(key, salt));\n    poseidon_encrypt(plains, key, nonce)\n}\n\n#[test]\nfn test_main() {}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/encrypt_packet/src/main.nr"}}};

export async function encrypt_packet(key_commit: Field, nonce: Field, plains: Field[], key: Field[], salt: Field, foreignCallHandler?: ForeignCallHandler): Promise<Field[]> {
  const program = new Noir(encrypt_packet_circuit);
  const args: InputMap = { key_commit, nonce, plains, key, salt };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field[];
}
export type get_key_commitmentInputType = {
  key: Field[];
  salt: Field;
}

export type get_key_commitmentReturnType = Field;
export const get_key_commitment_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"key","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"private"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/7VSWw7CIBCkLa1a9ceT7PIoy59XkUjvfwLjmtKEoh/G1kkmO2xgMmG3EhPOzFa8o0r1mqqGwZjoVESNN1A+kAVjw0BIaMneFWkdyZDzwTvwaHTE0Xo9wgSZecFK/DNn+3tOVTZe2S5MWWR9JF1lWma6TXp+1zF3zD3zkPqfvLvMo/7Su2cemae0C1IsURf/C+uAzYaz6sW2O9WI5V7Vxbm8M+MJHoy590wDAAA=","debug_symbols":"pZXLroMgEIbfhbULhpvSVzk5aailDQlBQ7XJiem7H7SidYFpZDXK+M2NP86ArvrS38/G3ZoHOv0M6OKNteZ+tk2tOtO4cDq8ChRfz53XOhyhD3+gWuW169DJ9dYW6KlsP330aJWbbKd88OICaXcNNgS8GavHp1ex0jiNAsgZBr7inGx4SPOElzNPymrl2YYnO/kJjflZkqdpnnIy8wzEwgu+4dlO/RTHAggFOBKBVHKJgEkqgti7AxGbAKj4kRpKEMs1UJyKUO3UUJbLRZQy2YVMR5CMzwEkrw7wgMkyBSz4kR4kXsQsSbKHPTUziGOsREqNQDPlDCxTz8Cz5Qj5etyt4jtBQr4iIVeSkK9JOCjK3/CmauM3SwHhcewFgrchb0PDIMe/01N5oy5Wz+vj1rv6Y5t0f230xH3T+qbW197rMcnkC2n/AQ==","file_map":{"52":{"source":"use super::cipher::poseidon_decrypt;\n\n#[export]\npub fn get_key_commitment(key: [Field; 2], salt: Field) -> Field {\n    super::utils::commit(key, salt)\n}\n\n// #[export]\n// fn encrypt_key(master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::encrypt_single(master_key, key, nonce, 0)\n// }\n\n// #[export]\n// fn decrypt_key(enc_master_key: Field, key: Field, nonce: Field) -> Field {\n//     super::cipher::decrypt_single(enc_master_key, key, nonce, 0)\n// }\n\n#[export]\npub fn decrypt_packet(\n    ciphers: [Field; 510 + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; 510] {\n    poseidon_decrypt(ciphers, key, nonce)\n}\n\n#[export]\nfn derive_public_key(private_key: Field) -> [Field; 2] {\n    super::ecdh::derive_public_key(private_key)\n}\n\n#[export]\nfn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    super::ecdh::derive_shared_key(private_key, public_key_packed)\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/exports.nr"},"54":{"source":"use poseidon::{poseidon2::Poseidon2};\n\n#[field(bn254)]\npub fn poseidon2_hash<let N: u32>(value: [Field; N]) -> Field {\n    Poseidon2::hash(value, N)\n}\n\n#[field(bn254)]\npub fn commit<let N: u32>(value: [Field; N], salt: Field) -> Field {\n    poseidon2_hash([poseidon2_hash(value), salt])\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/utils.nr"},"65":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}}};

export async function get_key_commitment(key: Field[], salt: Field, foreignCallHandler?: ForeignCallHandler): Promise<Field> {
  const program = new Noir(get_key_commitment_circuit);
  const args: InputMap = { key, salt };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field;
}
export type saleInputType = {
  key_commitment: Field;
  from_pub: Field[];
  to_pub: Field[];
  nonce: Field;
  master_key: Field;
  private_key: Field;
  salt: Field;
}

export type saleReturnType = Field;
export const sale_circuit: CompiledCircuit = {"abi":{"parameters":[{"name":"key_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"from_pub","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"to_pub","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},{"name":"nonce","type":{"kind":"field"},"visibility":"public"},{"name":"master_key","type":{"kind":"field"},"visibility":"private"},{"name":"private_key","type":{"kind":"field"},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"50":{"source":"use super::utils::poseidon2_hash;\nuse poseidon::poseidon2_permutation;\n\n#[field(bn254)]\nfn compute_pad(key: Field, nonce: Field, counter: u32) -> Field {\n    poseidon2_hash([key, nonce, counter as Field])\n}\n\n#[field(bn254)]\npub fn encrypt_single(plains: Field, key: Field, nonce: Field, counter: u32) -> Field {\n    plains + compute_pad(key, nonce, counter)\n}\n\n#[field(bn254)]\npub fn decrypt_single(ciphers: Field, key: Field, nonce: Field, counter: u32) -> Field {\n    ciphers - compute_pad(key, nonce, counter)\n}\n\n#[field(bn254)]\npub fn encrypt<let N: u32>(plains: [Field; N], key: Field, nonce: Field) -> [Field; N] {\n    plains.mapi(|i, p| encrypt_single(p, key, nonce, i))\n}\n\n#[field(bn254)]\npub fn decrypt<let N: u32>(ciphers: [Field; N], key: Field, nonce: Field) -> [Field; N] {\n    ciphers.mapi(|i, c| decrypt_single(c, key, nonce, i))\n}\n\n#[field(bn254)]\npub fn poseidon_encrypt<let N: u32>(\n    plains: [Field; N],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; N + 1] {\n    assert(nonce.lt(0x100000000000000000000000000000000));\n\n    let padded_nonce = nonce + (N as Field) * 0x100000000000000000000000000000000;\n    let mut state: [Field; 4] = [0, key[0], key[1], padded_nonce];\n\n    let state_len = state.len();\n    assert(N >= state_len - 1);\n\n    let mut ciphers: [Field; N + 1] = [0; N + 1];\n\n    for i in 0..(N / (state_len - 1)) {\n        state = poseidon2_permutation(state, state_len);\n\n        for j in 1..state_len {\n            let index = i * (state_len - 1) + j - 1;\n            state[j] += plains[index];\n            ciphers[index] = state[j];\n        }\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    for i in (N - (N % (state_len - 1)))..N {\n        let index = (i % (state_len - 1)) + 1;\n        state[index] += plains[i];\n        ciphers[i] = state[index];\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    ciphers[N] = state[1];\n    ciphers\n}\n\n#[field(bn254)]\npub fn poseidon_decrypt<let N: u32>(\n    ciphers: [Field; N + 1],\n    key: [Field; 2],\n    nonce: Field,\n) -> [Field; N] {\n    assert(nonce.lt(0x100000000000000000000000000000000));\n\n    let padded_nonce = nonce + (N as Field) * 0x100000000000000000000000000000000;\n    let mut state: [Field; 4] = [0, key[0], key[1], padded_nonce];\n\n    let state_len = state.len();\n    assert(N >= state_len - 1);\n\n    let mut plains: [Field; N] = [0; N];\n\n    for i in 0..(N / (state_len - 1)) {\n        state = poseidon2_permutation(state, state_len);\n\n        for j in 1..state_len {\n            let index = i * (state_len - 1) + j - 1;\n            plains[index] = ciphers[index] - state[j];\n            state[j] = ciphers[index];\n        }\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    for i in (N - (N % (state_len - 1)))..N {\n        let index = (i % (state_len - 1)) + 1;\n        plains[i] = ciphers[i] - state[index];\n        state[index] = ciphers[i];\n    }\n\n    state = poseidon2_permutation(state, state_len);\n    assert(ciphers[N] == state[1]);\n    plains\n}\n\n#[test]\nfn test_e2e() {\n    let key = 0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961;\n    let nonce = 1337;\n\n    let msg = [22405534230753963835153736737; 256]; // \"Hello world!\"\n    let encrypted = encrypt(msg, key, nonce);\n    let new_msg = decrypt(encrypted, key, nonce);\n\n    assert(msg == new_msg);\n\n    println(f\"Key: {key}\");\n    println(f\"nonce: {nonce}\");\n\n    println(f\"Original: {msg}\");\n    println(f\"Encrypted: {encrypted}\");\n    println(f\"Decrypted: {new_msg}\");\n}\n\n#[test]\nfn test_e2e_poseidon() {\n    let key: [Field; 2] = [\n        0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961,\n        0x1ff18c97cd54b27391280a1f24cc94ef8c05e421525eb05bd4ded690735bf961,\n    ];\n    let nonce = 1337;\n\n    let msg = [22405534230753963835153736737; 1024]; // \"Hello world!\"\n    let encrypted = poseidon_encrypt(msg, key, nonce);\n    let new_msg = poseidon_decrypt(encrypted, key, nonce);\n\n    assert(msg == new_msg);\n\n    println(f\"Key: {key}\");\n    println(f\"nonce: {nonce}\");\n\n    println(f\"Original: {msg}\");\n    println(f\"Encrypted: {encrypted}\");\n    println(f\"Decrypted: {new_msg}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/cipher.nr"},"51":{"source":"use noir_edwards::{ScalarField, bjj::BabyJubJub, Curve, CurveTrait};\nuse super::utils::poseidon2_hash;\n\n// [8]G precalculated\nglobal BASE8_POINT: [Field; 2] = [\n    5299619240641551281634865583518297030282874472190772894086521144482721001553,\n    16950150798460657717958625567821834550301663161624707787222815936182638968203,\n];\n\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n\n#[field(bn254)]\npub fn derive_public_key(private_key: Field) -> [Field; 2] {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let base8_point: BabyJubJub = Curve::new(BASE8_POINT[0], BASE8_POINT[1]);\n    let point = base8_point.mul(private_scalar);\n    [point.x, point.y]\n}\n\n#[field(bn254)]\npub fn derive_shared_key(private_key: Field, public_key_packed: [Field; 2]) -> Field {\n    let private_scalar: ScalarField<64> = ScalarField::from(private_key);\n    let point: BabyJubJub = Curve::new(public_key_packed[0], public_key_packed[1]);\n    let shared_key = point.mul(private_scalar);\n    shared_key.x\n}\n\n#[test]\nfn test_e2e() {\n    let a_key = poseidon2_hash([0]);\n    let a_pubkey = derive_public_key(a_key);\n\n    let b_key = poseidon2_hash([1]);\n    let b_pubkey = derive_public_key(b_key);\n\n    let key_1 = derive_shared_key(a_key, b_pubkey);\n    let key_2 = derive_shared_key(b_key, a_pubkey);\n\n    assert(key_1 == key_2);\n\n    println(f\"Alice public key: {a_pubkey}\");\n    println(f\"Alice private key: {a_key}\");\n    println(\"\");\n    println(f\"Bob public key: {b_pubkey}\");\n    println(\"\");\n    println(f\"Shared Key 1: {key_1}\");\n    println(f\"Shared Key 2: {key_2}\");\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/ecdh.nr"},"54":{"source":"use poseidon::{poseidon2::Poseidon2};\n\n#[field(bn254)]\npub fn poseidon2_hash<let N: u32>(value: [Field; N]) -> Field {\n    Poseidon2::hash(value, N)\n}\n\n#[field(bn254)]\npub fn commit<let N: u32>(value: [Field; N], salt: Field) -> Field {\n    poseidon2_hash([poseidon2_hash(value), salt])\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/common/src/utils.nr"},"56":{"source":"mod scalar_field;\nmod test;\npub mod bjj;\n\npub use crate::scalar_field::ScalarField;\nuse std::ops::{Add, Neg, Sub};\n\npub struct Curve<Params> {\n    pub x: Field,\n    pub y: Field,\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### T R A I T S\n// ####################################################################################################################\n// ####################################################################################################################\n\n/// Parametrises a Twisted Edwards curve\ntrait TECurveParameterTrait {\n    fn a() -> Field; // twisted edward curve parameter a\n    fn d() -> Field; // twisted edward curve parameter d\n    fn gen() -> (Field, Field); // generator point x/y coordinates\n}\n\n/// Defines methods that a valid Curve implementation must satisfy\npub trait CurveTrait<Params>: Add + Sub + Eq + Neg + Default {\n    fn new(x: Field, y: Field) -> Self;\n    fn zero() -> Self;\n    fn one() -> Self;\n    fn dbl(self) -> Self;\n    fn mul<let NScalarSlices: u32>(self, x: ScalarField<NScalarSlices>) -> Self;\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self;\n\n    fn eq(self, x: Self) -> bool {\n        self == x\n    }\n    fn is_zero(self) -> bool {\n        self == Self::zero()\n    }\n\n    fn is_on_curve(self) -> bool;\n    fn assert_is_on_curve(self);\n    fn assert_equal(self, other: Self);\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### C O N S T R A I N E D    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> std::default::Default for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Returns point at infinity\n    ///\n    /// Cost: 0 gates\n    fn default() -> Self {\n        Curve::zero()\n    }\n}\n\nimpl<Params> std::ops::Add for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self + other`\n    ///\n    /// Cost: 7 gates\n    fn add(self, other: Self) -> Self {\n        Curve::add_internal(self, other, Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::ops::Neg for Curve<Params> {\n    /// Negate a point\n    ///\n    /// Cost: usually 0, will cost 1 gate if the `x` coordinate needs to be converted into a witness\n    fn neg(self) -> Self {\n        Curve { x: -self.x, y: self.y }\n    }\n}\n\nimpl<Params> std::ops::Sub for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n    /// Compute `self - other`\n    ///\n    /// Cost: 7 gates\n    fn sub(self, other: Self) -> Self {\n        Curve::add_internal(self, other.neg(), Params::a(), Params::d())\n    }\n}\n\nimpl<Params> std::cmp::Eq for Curve<Params> {\n    /// Compute `self == other`\n    ///\n    /// Cost: 6 gates\n    fn eq(self, other: Self) -> bool {\n        (self.x == other.x) & (self.y == other.y)\n    }\n}\n\nimpl<Params> std::convert::From<(Field, Field)> for Curve<Params> {\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    ///\n    /// Cost: 0 gates\n    fn from((x, y): (Field, Field)) -> Self {\n        Curve { x, y }\n    }\n}\n\nimpl<Params> CurveTrait<Params> for Curve<Params>\nwhere\n    Params: TECurveParameterTrait,\n{\n\n    /// Construct a new point\n    ///\n    /// If you know the x/y coords form a valid point DO NOT USE THIS METHOD\n    /// This method calls `assert_is_on_curve` which costs 3 gates.\n    /// Instead, directly construct via Curve{x, y} or use from((x, y))\n    ///\n    /// Cost: 3 gates\n    fn new(x: Field, y: Field) -> Self {\n        let result = Curve { x, y };\n        result.assert_is_on_curve();\n        result\n    }\n\n    /// Return the Identity element (point at infinity)\n    ///\n    /// Cost: 0 gates\n    fn zero() -> Self {\n        Curve { x: 0, y: 1 }\n    }\n\n    /// Return the Generator of the group\n    ///\n    /// Cost: 0 gates (assuming Params trait returns values known at compile time!)\n    fn one() -> Self {\n        let (x, y) = Params::gen();\n        Curve { x, y }\n    }\n\n    /// Validate a point is on the curve\n    ///\n    /// cheaper than `is_on_curve` (assert is cheaper than returning a bool)\n    ///\n    /// Cost: 3 gates\n    fn assert_is_on_curve(self) {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        assert(t2 == t3);\n    }\n\n    /// Constrain two points to equal each other\n    ///\n    /// Cheaper than `assert(self == other)` because no need to return a bool\n    ///\n    /// Cost: 0-2 gates (can do these asserts with just copy constraints)\n    fn assert_equal(self, other: Self) {\n        assert(self.x == other.x);\n        assert(self.y == other.y);\n    }\n\n    /// Return a bool that describes whether the point is on the curve\n    ///\n    /// If you don't need to handle the failure case, it is cheaper to call `assert_is_on_curve`\n    ///\n    /// Cost: 5 gates\n    fn is_on_curve(self) -> bool {\n        let t0 = self.x * self.x;\n        let t1 = self.y * self.y;\n        std::as_witness(t0);\n        std::as_witness(t1);\n        let t2 = Params::a() * t0 + t1;\n        let t3 = 1 + Params::d() * t0 * t1;\n        (t2 == t3)\n    }\n\n    /// Compute `self + self`\n    ///\n    /// Cost: 5 gates\n    fn dbl(self) -> Self {\n        Curve::dbl_internal(self, Params::a(), Params::d())\n    }\n\n    /// Compute `self * scalar`\n    ///\n    /// Uses the Straus method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows:\n    ///      1: computing the Straus point lookup table (169 gates)\n    ///      2: 252 point doublings (1260 gates)\n    ///      3: 63 point additions (441 gates)\n    ///      4: 126 table reads with runtime index (252 gates)\n    ///\n    /// Cost: 2122 gates + cost of creating ScalarField (110 gates)\n    fn mul<let NScalarSlices: u32>(self: Self, scalar: ScalarField<NScalarSlices>) -> Self {\n        // define a, d params locally to make code more readable (shouldn't affect performance)\n        let a = Params::a();\n        let d = Params::d();\n\n        // Construct tables of precomputed point coordinates.\n        let (table_x, table_y): ([Field; 16], [Field; 16]) = self.compute_straus_point_table(a, d);\n\n        // Initialize the accumulator with the point that maps to the first (most significant) scalar slice\n        let idx = scalar.base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: table_x[idx], y: table_y[idx] };\n\n        // Execute a double-and-add subroutine\n        // 1. Compute `accumulator = accumulator * 16`\n        // 2. Extract 4-bits from the scalar multiplier and\n        //    use them to retrieve the corresponding point from our point table\n        // Note: this is similar to the \"double and add\" scalar multiplication method, except we use base16 instead of base2!\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            let idx = scalar.base4_slices[i] as u32;\n            let x = table_x[idx];\n            let y = table_y[idx];\n            accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n        }\n\n        // todo fix\n        if (scalar.skew) {\n            accumulator = accumulator - self;\n        }\n        accumulator\n    }\n\n    /// compute `points[0] * scalar[0] + ... + points[N-1] * scalar[N-1]`\n    ///\n    /// Is cheaper than `mul` when processing >1 point due to reduced number of point doublings\n    /// uses the Straus MSM method via lookup tables.\n    /// Assumes backend has an efficient implementation of a memory table abstraction\n    /// i.e. `let x = table[y]` is efficient even if `y` is not known at compile time\n    ///\n    /// Key cost components are as follows\n    /// PER POINT costs:\n    ///      1: computing the Straus point lookup table (169N gates)\n    ///      2: 63 point additions (441N gates)\n    ///      3: 126 table reads with runtime index (252N gates)\n    ///\n    /// Additional costs:\n    ///      1. 252 point doublings 1260 gates\n    ///\n    /// Cost: 1260 + 862N + cost of creating ScalarField (110N gates)\n    fn msm<let N: u32, let NScalarSlices: u32>(\n        points: [Self; N],\n        scalars: [ScalarField<NScalarSlices>; N],\n    ) -> Self {\n        let a = Params::a();\n        let d = Params::d();\n\n        // Generalized version of `mul` for multiple points.\n        let mut point_tables: [([Field; 16], [Field; 16]); N] = [([0; 16], [0; 16]); N];\n        for j in 0..N {\n            point_tables[j] = points[j].compute_straus_point_table(a, d);\n        }\n\n        let idx = scalars[0].base4_slices[0] as u32;\n        let mut accumulator: Self = Curve { x: point_tables[0].0[idx], y: point_tables[0].1[idx] };\n        for j in 1..N {\n            let idx = scalars[j].base4_slices[0] as u32;\n            let P = Curve { x: point_tables[j].0[idx], y: point_tables[j].1[idx] };\n            accumulator = accumulator.add_internal(P, a, d);\n        }\n        for i in 1..NScalarSlices {\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            accumulator = accumulator.dbl_internal(a, d);\n            for j in 0..N {\n                let idx = scalars[j].base4_slices[i] as u32;\n                let x = point_tables[j].0[idx];\n                let y = point_tables[j].1[idx];\n                accumulator = accumulator.add_internal(Curve { x, y }, a, d);\n            }\n        }\n\n        for j in 0..N {\n            if (scalars[j].skew == true) {\n                accumulator = accumulator - points[j];\n            }\n        }\n        accumulator\n    }\n}\n\n// ####################################################################################################################\n// ####################################################################################################################\n// ### H E L P E R    F U N C T I O N S\n// ####################################################################################################################\n// ####################################################################################################################\nimpl<Params> Curve<Params> {\n\n    /// add two points together\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `add` :(\n    fn add_internal(self, other: Self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let x2 = other.x;\n        let y1 = self.y;\n        let y2 = other.y;\n        let (x, y, lambda) = unsafe { __add_unconstrained(x1, x2, y1, y2, a, d) };\n        let x1x2 = x1 * x2;\n        let x1y2 = x1 * y2;\n        std::as_witness(x1x2);\n        std::as_witness(x1y2);\n        let x_lhs = x * lambda * d + x - x1y2; // equals y1x2\n        let y_lhs = y * lambda * -d + y + x1x2 * a; // equals y1y2\n        let y1x2 = y1 * x2;\n        let y1y2 = y1 * y2;\n        std::as_witness(y1x2);\n        std::as_witness(y1y2);\n        let y1y2x1x2 = y1y2 * x1x2;\n        assert(x_lhs == y1x2);\n        assert(y_lhs == y1y2);\n        assert(y1y2x1x2 == lambda);\n        Self { x, y }\n    }\n\n    /// add a point to itself\n    ///\n    /// This method exists because of a Noir bug where `Params` cannot be accessed by an internal function\n    /// called from internal function. e.g. compiler error if `mul` impl tries to call `dbl` :(\n    fn dbl_internal(self, a: Field, d: Field) -> Self {\n        let x1 = self.x;\n        let y1 = self.y;\n        let (x3, y3, _) = unsafe { __add_unconstrained(x1, x1, y1, y1, a, d) };\n        let x1x1a = x1 * x1 * a;\n        std::as_witness(x1x1a);\n        // t1 = a*x_1^2 + y_1^2\n        let t1 = y1 * y1 + x1x1a;\n        std::as_witness(t1);\n        // t3 = y_3 * (2 - a*x_1^2 + y_1^2) + 2*a*x_1^2\n        let t3 = y3 + y3 - t1 * y3 + x1x1a * 2;\n        // t3 == t1 implies y_3 * (2 - a*x_1^2 - y_1^2) + 2*a*x_1^2 == a*x_1^2 + y_1^2\n        // i.e. y_3 = y_1^2 - a*x_1^2 / (2 - a*x_1^2 - y_1^2)\n        assert(t3 == t1);\n        let t4 = x1 * y1;\n        std::as_witness(t4);\n        // x3 * t1 - t4 == t4 implies x_3 * (y_1^2 + a * x_1^2) = 2 * x_1 * y_1\n        // i.e. x_3 = 2 * x_1 * y_1 / (y_1^2 + a * x_1^2)\n        let t2 = x3 * t1 - t4;\n        assert(t2 == t4);\n        Self { x: x3, y: y3 }\n    }\n\n    /// Compute a 4-bit lookup table of point multiples for the Straus windowed scalar multiplication algorithm.\n    ///\n    /// Table contains [0, P, 2P, ..., 15P], which is used in the scalar mul algorithm to minimize the total number of required point additions\n    ///\n    /// It is cheaper to use ([Field; 16], [Field; 16]) than it is ([Curve; 16]).\n    /// This is because the compiler will represent [Curve; 16] in 1 ROM array (vs 2 for [Field; 16], [Field; 16]).\n    /// This means that any index into the ROM array for [Curve; 16] requires an additional arithmetic gate to process.\n    ///\n    ///      For example consider `let P: Curve = table[idx]`\n    ///      `table` will be a ROM array with 32 elements in it.\n    ///      The x-coordinates will be located at `2 * idx`\n    ///      The y-coordinates will be located at `2 * idx + 1`\n    ///      If `idx` is not known at compile time (for Straus it isnt), 2 arithmetic gates are required to evaluate `2 * idx`, `2 * idx + 1`\n    ///      before they can be used as arguments in a memory lookup protocol\n    ///\n    ///      Now consider `let P_x = table_x[idx]; let P_y = table_y[idx]`\n    ///      In this example, `idx` can be directly used as the argument into a memory lookup protocol for both tables.\n    ///\n    ///      For the Barretenberg backend, the cost of a Read-Only memory lookup is 2 gates,\n    ///      so splitting the x/y coordinates into separate tables means that the cost to lookup a point is 4 gates\n    ///      2 extra arithmetic gates would increase the cost by 50%, which we avoid by returning `([Field; 16], [Field; 16])` instead of `([Curve; 16])`\n    ///\n    /// Key cost components are as follows:\n    ///      1: Defining two size-16 lookup tables (2 gates per element, 32 elements = 64 gates)\n    ///      2: 15 point additions (7 * 5 = 105)\n    ///\n    /// Total Cost: 169 gates\n    fn compute_straus_point_table(self, a: Field, d: Field) -> ([Field; 16], [Field; 16]) {\n        let mut table_x: [Field; 16] = [0; 16];\n        let mut table_y: [Field; 16] = [0; 16];\n        table_x[8] = self.x;\n        table_y[8] = self.y;\n        let D = self.dbl_internal(a, d);\n        for i in 1..8 {\n            let Q = Self { x: table_x[7 + i], y: table_y[7 + i] };\n            let V = D.add_internal(Q, a, d);\n            table_x[8 + i] = V.x;\n            table_y[8 + i] = V.y;\n        }\n        for i in 0..8 {\n            table_x[i] = -table_x[15 - i];\n            table_y[i] = table_y[15 - i];\n        }\n        (table_x, table_y)\n    }\n}\n\n/// add points together, return output + lambda ter\nunconstrained fn __add_unconstrained(\n    x1: Field,\n    x2: Field,\n    y1: Field,\n    y2: Field,\n    a: Field,\n    d: Field,\n) -> (Field, Field, Field) {\n    let lambda = y1 * y2 * x1 * x2;\n    let y = (x1 * x2 * a - y1 * y2) / (lambda * d - 1);\n    let x = (x1 * y2 + y1 * x2) / (lambda * d + 1);\n    (x, y, lambda)\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/lib.nr"},"57":{"source":"use std::static_assert;\n\n/// ScalarField represents a scalar multiplier as a sequence of 4-bit slices\n///\n/// There is nuance to ScalarField, because twisted edwards curves generally have prime group orders that easily fit into a Field\n/// We can therefore obtain cheap conversions by simply summing up the bit slices and validate they equal the input scalar\n/// However...when converting arbitrary field elements (i.e. scalars that are multiples of a TE curve group order),\n/// we must perform additional checks when converting into 4-bit slices, as we must validate that the sum of the slices is smaller than the Field modulus (when evaluated over the integers)\n/// This is expensive and we would rather not do it! therefore ScalarField<N> is flexible.\n/// ScalarField<63> enables cheap bitslice converions for scalar multipliers that must be <2^{252}\n/// ScalarField<64> enables bitslice conversions for arbitrary field elements\n///\n/// N.B. ScalarField bit values are not constrained to be smaller than the TE curve group order.\n/// ScalarField is used when performing scalar multiplications, where all operations wrap modulo the curve order\npub global TWO_POW_128: Field = 0x100000000000000000000000000000000;\npub global PLO: Field = 0x2833e84879b9709143e1f593f0000001;\npub global PHI: Field = 0x30644e72e131a029b85045b68181585d;\n\npub struct ScalarField<let N: u32> {\n    pub(crate) base4_slices: [u8; N],\n    pub(crate) skew: bool,\n}\n\nunconstrained fn get_wnaf_slices<let N: u32>(x: Field) -> ([u8; N], bool) {\n    let mut result: [u8; N] = [0; N];\n    let mut nibbles: [u8; N] = to_le_radix_16(x);\n\n    let skew: bool = nibbles[0] & 1 == 0;\n    nibbles[0] += skew as u8;\n    result[N - 1] = (nibbles[0] + 15) / 2;\n    for i in 1..N {\n        let mut nibble: u8 = nibbles[i];\n        result[N - 1 - i] = (nibble + 15) / 2;\n        if (nibble & 1 == 0) {\n            result[N - 1 - i] += 1;\n            result[N - i] -= 8;\n        }\n    }\n    (result, skew)\n}\n\nunconstrained fn from_wnaf_slices<let N: u32>(x: [u8; N], skew: bool) -> Field {\n    let mut result: Field = 0;\n\n    for i in 0..N {\n        result *= 16;\n        result += (x[i] as Field) * 2 - 15;\n    }\n    result -= skew as Field;\n    result\n}\n\nunconstrained fn get_borrow_flag(lhs_lo: Field, rhs_lo: Field) -> bool {\n    lhs_lo.lt(rhs_lo + 1)\n}\n\nunconstrained fn to_le_radix_16<let N: u32>(value: Field) -> [u8; N] {\n    // Round up on odd values of `N` to ensure space for last nibble.\n    let bytes = value.to_le_bytes::<(N + 1) / 2>();\n    let mut result: [u8; N] = [0; N];\n    for index in 0..(N / 2) {\n        result[index * 2] = bytes[index] & 0x0F; // Extract low nibble (bits 0-3)\n        result[index * 2 + 1] = (bytes[index] >> 4); // Extract high nibble (bits 4-7)\n    }\n    if (N & 1) == 1 {\n        let last_nibble = bytes[bytes.len() - 1];\n        // The last byte must have the top 4 bits empty.\n        (last_nibble as Field).assert_max_bit_size::<4>();\n        result[N - 1] = last_nibble;\n    }\n    result\n}\n\nimpl<let N: u32> std::convert::From<Field> for ScalarField<N> {\n\n    /// Construct from a field element\n    ///\n    /// if N >= 64 we perform extra checks to ensure the slice decomposition represents the same integral value as the input\n    /// (e.g. sum of slices != x + modulus)\n    fn from(x: Field) -> Self {\n        // the field elements have 254 bits max, so we do not need to support N > 64\n        static_assert(N <= 64, \"N must be at most 64\");\n        let mut result: Self = ScalarField { base4_slices: [0; N], skew: false };\n        let (slices, skew): ([u8; N], bool) = unsafe { get_wnaf_slices(x) };\n        result.base4_slices = slices;\n        result.skew = skew;\n        if (N < 64) {\n            let mut acc: Field = (slices[0] as Field) * 2 - 15;\n            for i in 1..N {\n                acc *= 16;\n                acc += (slices[i] as Field) * 2 - 15;\n            }\n            assert(acc - skew as Field == x);\n        } else {\n            // TODO: if num bits = 64, validate in sum of the bits is smaller than the Field modulus\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n\n            for i in 0..32 {\n                lo *= 16;\n                lo += (slices[32 + i] as Field) * 2 - 15;\n                hi *= 16;\n                hi += (slices[i] as Field) * 2 - 15;\n            }\n\n            lo -= skew as Field;\n            // Validate that the integer represented by (lo, hi) is smaller than the integer represented by (plo, phi)\n\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            // Safety: we assert that the absolute value has less than 128 bits\n            let is_positive: bool = unsafe { get_borrow_flag(lo, TWO_POW_128) };\n\n            let abs_lo = (is_positive as Field) * lo + (1 - is_positive as Field) * (-lo);\n\n            abs_lo.assert_max_bit_size::<128>();\n            // Safety: `borrow`'s value is constrained to be correct by below range constraints.\n            let borrow = unsafe { get_borrow_flag(PLO, abs_lo) as Field };\n            // we only need to check the rlo has 128 bits or less if lo is positive. if negative, the lo is already less than PLO\n            let rlo = is_positive as Field * (PLO - lo + borrow * TWO_POW_128 - 1)\n                + (1 - is_positive as Field) * (-lo); // -1 because we are checking a strict <, not <=\n            // is lo is positive, we need to check the hi is less than phi with the borrow flag subtracted\n            // if lo is negative, we have to check that hi * 2^128 < phi * 2^128 + abs_lo + plo\n            // to do this we first make a flag to check that abs_lo + plo is larger than 2^128 or not\n            // if they are larger, we check that hi < phi + 1 and otherwise we check that hi < phi\n            // Safety: we assert the when the flag is positive we have less than 128 bits\n            let threshold_flag: bool = unsafe { get_borrow_flag(abs_lo + PLO, TWO_POW_128) };\n            (threshold_flag as Field * (abs_lo + PLO)).assert_max_bit_size::<128>();\n            let rhi = is_positive as Field * (PHI - hi - borrow)\n                + (1 - is_positive as Field) * (PHI - hi + threshold_flag as Field);\n            // the rlo value would have 128 bits or less if positive and more if negative as the modulus is 254 bits\n            rlo.assert_max_bit_size::<128>();\n            rhi.assert_max_bit_size::<128>();\n        }\n        for i in 0..N {\n            (result.base4_slices[i] as Field).assert_max_bit_size::<4>();\n        }\n        result\n    }\n}\n\nimpl<let N: u32> std::convert::Into<Field> for ScalarField<N> {\n\n    /// Construct from tuple of field elements\n    ///\n    /// Use this method instead of `new` if you know x/y is on the curve\n    fn into(self: Self) -> Field {\n        let mut acc: Field = 0;\n        for i in 0..N {\n            acc = acc * 16;\n            acc = acc + (self.base4_slices[i] as Field) * 2 - 15;\n        }\n        acc -= self.skew as Field;\n        acc\n    }\n}\n\nimpl<let N: u32> ScalarField<N> {\n\n    pub fn new() -> Self {\n        Self { base4_slices: [0; N], skew: false }\n    }\n    fn get(self, idx: u32) -> u8 {\n        self.base4_slices[idx]\n    }\n}\n\n#[test]\nunconstrained fn test_wnaf() {\n    let result: Field = 0x123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0;\n    let (t0, t1) = get_wnaf_slices::<64>(result);\n    let expected = from_wnaf_slices(t0, t1);\n    assert_eq(result, expected);\n}\n\n#[test]\nfn test_regression_wnaf() {\n    let a = 0x7b;\n    let s: ScalarField<64> = ScalarField::<64>::from(a);\n    let b: Field = ScalarField::<64>::into(s);\n    assert_eq(a, b);\n}\n\n#[test]\nunconstrained fn to_le_radix_16_works_with_odd_N() {\n    let input = 0x0f00;\n    let nibbles: [u8; 3] = to_le_radix_16(input);\n    assert_eq(nibbles, [0x0, 0x0, 0xf]);\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/noir-edwards/v0.2.5/src/scalar_field.nr"},"65":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/georgegeorge/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"69":{"source":"use common::{cipher::encrypt, ecdh::{derive_public_key, derive_shared_key}, utils::commit};\n\nfn main(\n    key_commitment: pub Field,\n    from_pub: pub [Field; 2],\n    to_pub: pub [Field; 2],\n    nonce: pub Field,\n    master_key: Field,\n    private_key: Field,\n    salt: Field,\n) -> pub Field {\n    assert(from_pub == derive_public_key(private_key));\n    assert(key_commitment == commit([master_key], salt));\n\n    let shared_key = derive_shared_key(private_key, to_pub);\n    encrypt([master_key], shared_key, nonce)[0]\n}\n\n#[test]\nfn test_main() {\n    // let a_key = Poseidon2::hash([0], 1);\n    // let a_pubkey = derive_public_key(a_key);\n\n    // let b_key = Poseidon2::hash([1], 1);\n    // let b_pubkey = derive_public_key(b_key);\n\n    // let mut msg = [0; FIELDS_PER_MESSAGE];\n    // let nonce = 0x123456789;\n    // let domain_tag = 0xdeadbeef;\n\n    // let msg_hash = Poseidon2::hash(msg, FIELDS_PER_MESSAGE);\n    // let commitment = commit(msg_hash, nonce, domain_tag);\n    // let cipher_text = main(\n    //     commitment,\n    //     b_pubkey,\n    //     a_pubkey,\n    //     nonce,\n    //     domain_tag,\n    //     msg_hash,\n    //     msg,\n    //     b_key,\n    // );\n\n    // let shared_key = derive_shared_key(a_key, b_pubkey);\n    // let recovered_msg = decrypt(cipher_text, shared_key, nonce, domain_tag);\n\n    // assert(msg == recovered_msg);\n}\n","path":"/Users/georgegeorge/WebstormProjects/bobiko/packages/circuits/crates/sale/src/main.nr"}}};

export async function sale(key_commitment: Field, from_pub: Field[], to_pub: Field[], nonce: Field, master_key: Field, private_key: Field, salt: Field, foreignCallHandler?: ForeignCallHandler): Promise<Field> {
  const program = new Noir(sale_circuit);
  const args: InputMap = { key_commitment, from_pub, to_pub, nonce, master_key, private_key, salt };
  const { returnValue } = await program.execute(args, foreignCallHandler);
  return returnValue as Field;
}
